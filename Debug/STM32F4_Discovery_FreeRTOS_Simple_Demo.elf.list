
STM32F4_Discovery_FreeRTOS_Simple_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002774  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  080028fc  080028fc  000128fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  08002900  08002900  00012900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000018  20000000  08002904  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
  6 .bss          00001e70  20000018  20000018  00020018  2**3
                  ALLOC
  7 ._user_heap_stack 00000400  20001e88  20001e88  00020018  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
  9 .debug_info   00005967  00000000  00000000  00020046  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001274  00000000  00000000  000259ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000808  00000000  00000000  00026c28  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000720  00000000  00000000  00027430  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00002db2  00000000  00000000  00027b50  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002df0  00000000  00000000  0002a902  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007e  00000000  00000000  0002d6f2  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001f2c  00000000  00000000  0002d770  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  0002f69c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080028e4 	.word	0x080028e4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	080028e4 	.word	0x080028e4

080001c8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80001cc:	4a16      	ldr	r2, [pc, #88]	; (8000228 <SystemInit+0x60>)
 80001ce:	4b16      	ldr	r3, [pc, #88]	; (8000228 <SystemInit+0x60>)
 80001d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80001d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80001d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80001dc:	4a13      	ldr	r2, [pc, #76]	; (800022c <SystemInit+0x64>)
 80001de:	4b13      	ldr	r3, [pc, #76]	; (800022c <SystemInit+0x64>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	f043 0301 	orr.w	r3, r3, #1
 80001e6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80001e8:	4b10      	ldr	r3, [pc, #64]	; (800022c <SystemInit+0x64>)
 80001ea:	2200      	movs	r2, #0
 80001ec:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80001ee:	4a0f      	ldr	r2, [pc, #60]	; (800022c <SystemInit+0x64>)
 80001f0:	4b0e      	ldr	r3, [pc, #56]	; (800022c <SystemInit+0x64>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80001f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80001fc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80001fe:	4b0b      	ldr	r3, [pc, #44]	; (800022c <SystemInit+0x64>)
 8000200:	4a0b      	ldr	r2, [pc, #44]	; (8000230 <SystemInit+0x68>)
 8000202:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000204:	4a09      	ldr	r2, [pc, #36]	; (800022c <SystemInit+0x64>)
 8000206:	4b09      	ldr	r3, [pc, #36]	; (800022c <SystemInit+0x64>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800020e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000210:	4b06      	ldr	r3, [pc, #24]	; (800022c <SystemInit+0x64>)
 8000212:	2200      	movs	r2, #0
 8000214:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000216:	f000 f80d 	bl	8000234 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800021a:	4b03      	ldr	r3, [pc, #12]	; (8000228 <SystemInit+0x60>)
 800021c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000220:	609a      	str	r2, [r3, #8]
#endif
}
 8000222:	bf00      	nop
 8000224:	bd80      	pop	{r7, pc}
 8000226:	bf00      	nop
 8000228:	e000ed00 	.word	0xe000ed00
 800022c:	40023800 	.word	0x40023800
 8000230:	24003010 	.word	0x24003010

08000234 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000234:	b480      	push	{r7}
 8000236:	b083      	sub	sp, #12
 8000238:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800023a:	2300      	movs	r3, #0
 800023c:	607b      	str	r3, [r7, #4]
 800023e:	2300      	movs	r3, #0
 8000240:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000242:	4a36      	ldr	r2, [pc, #216]	; (800031c <SetSysClock+0xe8>)
 8000244:	4b35      	ldr	r3, [pc, #212]	; (800031c <SetSysClock+0xe8>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800024c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800024e:	4b33      	ldr	r3, [pc, #204]	; (800031c <SetSysClock+0xe8>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000256:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	3301      	adds	r3, #1
 800025c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800025e:	683b      	ldr	r3, [r7, #0]
 8000260:	2b00      	cmp	r3, #0
 8000262:	d103      	bne.n	800026c <SetSysClock+0x38>
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800026a:	d1f0      	bne.n	800024e <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800026c:	4b2b      	ldr	r3, [pc, #172]	; (800031c <SetSysClock+0xe8>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000274:	2b00      	cmp	r3, #0
 8000276:	d002      	beq.n	800027e <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000278:	2301      	movs	r3, #1
 800027a:	603b      	str	r3, [r7, #0]
 800027c:	e001      	b.n	8000282 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800027e:	2300      	movs	r3, #0
 8000280:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000282:	683b      	ldr	r3, [r7, #0]
 8000284:	2b01      	cmp	r3, #1
 8000286:	d142      	bne.n	800030e <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000288:	4a24      	ldr	r2, [pc, #144]	; (800031c <SetSysClock+0xe8>)
 800028a:	4b24      	ldr	r3, [pc, #144]	; (800031c <SetSysClock+0xe8>)
 800028c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800028e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000292:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8000294:	4a22      	ldr	r2, [pc, #136]	; (8000320 <SetSysClock+0xec>)
 8000296:	4b22      	ldr	r3, [pc, #136]	; (8000320 <SetSysClock+0xec>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800029e:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80002a0:	4a1e      	ldr	r2, [pc, #120]	; (800031c <SetSysClock+0xe8>)
 80002a2:	4b1e      	ldr	r3, [pc, #120]	; (800031c <SetSysClock+0xe8>)
 80002a4:	689b      	ldr	r3, [r3, #8]
 80002a6:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80002a8:	4a1c      	ldr	r2, [pc, #112]	; (800031c <SetSysClock+0xe8>)
 80002aa:	4b1c      	ldr	r3, [pc, #112]	; (800031c <SetSysClock+0xe8>)
 80002ac:	689b      	ldr	r3, [r3, #8]
 80002ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80002b2:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80002b4:	4a19      	ldr	r2, [pc, #100]	; (800031c <SetSysClock+0xe8>)
 80002b6:	4b19      	ldr	r3, [pc, #100]	; (800031c <SetSysClock+0xe8>)
 80002b8:	689b      	ldr	r3, [r3, #8]
 80002ba:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80002be:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80002c0:	4b16      	ldr	r3, [pc, #88]	; (800031c <SetSysClock+0xe8>)
 80002c2:	4a18      	ldr	r2, [pc, #96]	; (8000324 <SetSysClock+0xf0>)
 80002c4:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80002c6:	4a15      	ldr	r2, [pc, #84]	; (800031c <SetSysClock+0xe8>)
 80002c8:	4b14      	ldr	r3, [pc, #80]	; (800031c <SetSysClock+0xe8>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80002d0:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80002d2:	bf00      	nop
 80002d4:	4b11      	ldr	r3, [pc, #68]	; (800031c <SetSysClock+0xe8>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d0f9      	beq.n	80002d4 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80002e0:	4b11      	ldr	r3, [pc, #68]	; (8000328 <SetSysClock+0xf4>)
 80002e2:	f240 6205 	movw	r2, #1541	; 0x605
 80002e6:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80002e8:	4a0c      	ldr	r2, [pc, #48]	; (800031c <SetSysClock+0xe8>)
 80002ea:	4b0c      	ldr	r3, [pc, #48]	; (800031c <SetSysClock+0xe8>)
 80002ec:	689b      	ldr	r3, [r3, #8]
 80002ee:	f023 0303 	bic.w	r3, r3, #3
 80002f2:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80002f4:	4a09      	ldr	r2, [pc, #36]	; (800031c <SetSysClock+0xe8>)
 80002f6:	4b09      	ldr	r3, [pc, #36]	; (800031c <SetSysClock+0xe8>)
 80002f8:	689b      	ldr	r3, [r3, #8]
 80002fa:	f043 0302 	orr.w	r3, r3, #2
 80002fe:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000300:	bf00      	nop
 8000302:	4b06      	ldr	r3, [pc, #24]	; (800031c <SetSysClock+0xe8>)
 8000304:	689b      	ldr	r3, [r3, #8]
 8000306:	f003 030c 	and.w	r3, r3, #12
 800030a:	2b08      	cmp	r3, #8
 800030c:	d1f9      	bne.n	8000302 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 800030e:	bf00      	nop
 8000310:	370c      	adds	r7, #12
 8000312:	46bd      	mov	sp, r7
 8000314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	40023800 	.word	0x40023800
 8000320:	40007000 	.word	0x40007000
 8000324:	07405408 	.word	0x07405408
 8000328:	40023c00 	.word	0x40023c00

0800032c <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0
}
 8000330:	bf00      	nop
 8000332:	46bd      	mov	sp, r7
 8000334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop

0800033c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8000340:	e7fe      	b.n	8000340 <HardFault_Handler+0x4>
 8000342:	bf00      	nop

08000344 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8000348:	e7fe      	b.n	8000348 <MemManage_Handler+0x4>
 800034a:	bf00      	nop

0800034c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8000350:	e7fe      	b.n	8000350 <BusFault_Handler+0x4>
 8000352:	bf00      	nop

08000354 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8000358:	e7fe      	b.n	8000358 <UsageFault_Handler+0x4>
 800035a:	bf00      	nop

0800035c <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
}
 8000360:	bf00      	nop
 8000362:	46bd      	mov	sp, r7
 8000364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000368:	4770      	bx	lr
 800036a:	bf00      	nop

0800036c <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800036c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800036e:	e003      	b.n	8000378 <LoopCopyDataInit>

08000370 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000370:	4b0b      	ldr	r3, [pc, #44]	; (80003a0 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8000372:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000374:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000376:	3104      	adds	r1, #4

08000378 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000378:	480a      	ldr	r0, [pc, #40]	; (80003a4 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 800037a:	4b0b      	ldr	r3, [pc, #44]	; (80003a8 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 800037c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800037e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000380:	d3f6      	bcc.n	8000370 <CopyDataInit>
  ldr  r2, =_sbss
 8000382:	4a0a      	ldr	r2, [pc, #40]	; (80003ac <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8000384:	e002      	b.n	800038c <LoopFillZerobss>

08000386 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000386:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000388:	f842 3b04 	str.w	r3, [r2], #4

0800038c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800038c:	4b08      	ldr	r3, [pc, #32]	; (80003b0 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 800038e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000390:	d3f9      	bcc.n	8000386 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000392:	f7ff ff19 	bl	80001c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000396:	f002 fa1d 	bl	80027d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800039a:	f000 f831 	bl	8000400 <main>
  bx  lr    
 800039e:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 80003a0:	08002904 	.word	0x08002904
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80003a4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80003a8:	20000018 	.word	0x20000018
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 80003ac:	20000018 	.word	0x20000018
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80003b0:	20001e88 	.word	0x20001e88

080003b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003b4:	e7fe      	b.n	80003b4 <ADC_IRQHandler>
	...

080003b8 <NVIC_SetPriorityGrouping>:
  priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.

    \param [in]      PriorityGroup  Priority grouping field
 */
static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003b8:	b480      	push	{r7}
 80003ba:	b085      	sub	sp, #20
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	f003 0307 	and.w	r3, r3, #7
 80003c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80003c8:	4b0c      	ldr	r3, [pc, #48]	; (80003fc <NVIC_SetPriorityGrouping+0x44>)
 80003ca:	68db      	ldr	r3, [r3, #12]
 80003cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 80003ce:	68ba      	ldr	r2, [r7, #8]
 80003d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80003d4:	4013      	ands	r3, r2
 80003d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
 80003d8:	68fb      	ldr	r3, [r7, #12]
 80003da:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
 80003dc:	68bb      	ldr	r3, [r7, #8]
 80003de:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
 80003e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80003e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003e8:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 80003ea:	4a04      	ldr	r2, [pc, #16]	; (80003fc <NVIC_SetPriorityGrouping+0x44>)
 80003ec:	68bb      	ldr	r3, [r7, #8]
 80003ee:	60d3      	str	r3, [r2, #12]
}
 80003f0:	bf00      	nop
 80003f2:	3714      	adds	r7, #20
 80003f4:	46bd      	mov	sp, r7
 80003f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fa:	4770      	bx	lr
 80003fc:	e000ed00 	.word	0xe000ed00

08000400 <main>:
static volatile uint32_t ulCountOfReceivedSemaphores = 0;

/*-----------------------------------------------------------*/

int main(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b086      	sub	sp, #24
 8000404:	af04      	add	r7, sp, #16
xTimerHandle xExampleSoftwareTimer = NULL;
 8000406:	2300      	movs	r3, #0
 8000408:	607b      	str	r3, [r7, #4]

	/* Configure the system ready to run the demo.  The clock configuration
	can be done here if it was not done before main() was called. */
	prvSetupHardware();
 800040a:	f000 f917 	bl	800063c <prvSetupHardware>


	/* Create the queue used by the queue send and queue receive tasks.
	http://www.freertos.org/a00116.html */
	xQueue = xQueueCreate( 	mainQUEUE_LENGTH,		/* The number of items the queue can hold. */
 800040e:	2200      	movs	r2, #0
 8000410:	2104      	movs	r1, #4
 8000412:	2001      	movs	r0, #1
 8000414:	f001 fc74 	bl	8001d00 <xQueueGenericCreate>
 8000418:	4602      	mov	r2, r0
 800041a:	4b31      	ldr	r3, [pc, #196]	; (80004e0 <main+0xe0>)
 800041c:	601a      	str	r2, [r3, #0]
							sizeof( uint32_t ) );	/* The size of each item the queue holds. */
	/* Add to the registry, for the benefit of kernel aware debugging. */
	vQueueAddToRegistry( xQueue, ( signed char * ) "MainQueue" );
 800041e:	4b30      	ldr	r3, [pc, #192]	; (80004e0 <main+0xe0>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	4930      	ldr	r1, [pc, #192]	; (80004e4 <main+0xe4>)
 8000424:	4618      	mov	r0, r3
 8000426:	f001 ff6d 	bl	8002304 <vQueueAddToRegistry>


	/* Create the semaphore used by the FreeRTOS tick hook function and the
	event semaphore task. */
	vSemaphoreCreateBinary( xEventSemaphore );
 800042a:	2203      	movs	r2, #3
 800042c:	2100      	movs	r1, #0
 800042e:	2001      	movs	r0, #1
 8000430:	f001 fc66 	bl	8001d00 <xQueueGenericCreate>
 8000434:	4602      	mov	r2, r0
 8000436:	4b2c      	ldr	r3, [pc, #176]	; (80004e8 <main+0xe8>)
 8000438:	601a      	str	r2, [r3, #0]
 800043a:	4b2b      	ldr	r3, [pc, #172]	; (80004e8 <main+0xe8>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	2b00      	cmp	r3, #0
 8000440:	d006      	beq.n	8000450 <main+0x50>
 8000442:	4b29      	ldr	r3, [pc, #164]	; (80004e8 <main+0xe8>)
 8000444:	6818      	ldr	r0, [r3, #0]
 8000446:	2300      	movs	r3, #0
 8000448:	2200      	movs	r2, #0
 800044a:	2100      	movs	r1, #0
 800044c:	f001 fc98 	bl	8001d80 <xQueueGenericSend>
	/* Add to the registry, for the benefit of kernel aware debugging. */
	vQueueAddToRegistry( xEventSemaphore, ( signed char * ) "xEventSemaphore" );
 8000450:	4b25      	ldr	r3, [pc, #148]	; (80004e8 <main+0xe8>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	4925      	ldr	r1, [pc, #148]	; (80004ec <main+0xec>)
 8000456:	4618      	mov	r0, r3
 8000458:	f001 ff54 	bl	8002304 <vQueueAddToRegistry>


	/* Create the queue receive task as described in the comments at the top
	of this	file.  http://www.freertos.org/a00125.html */
	xTaskCreate( 	prvQueueReceiveTask,			/* The function that implements the task. */
 800045c:	2300      	movs	r3, #0
 800045e:	9303      	str	r3, [sp, #12]
 8000460:	2300      	movs	r3, #0
 8000462:	9302      	str	r3, [sp, #8]
 8000464:	2300      	movs	r3, #0
 8000466:	9301      	str	r3, [sp, #4]
 8000468:	2302      	movs	r3, #2
 800046a:	9300      	str	r3, [sp, #0]
 800046c:	2300      	movs	r3, #0
 800046e:	2246      	movs	r2, #70	; 0x46
 8000470:	491f      	ldr	r1, [pc, #124]	; (80004f0 <main+0xf0>)
 8000472:	4820      	ldr	r0, [pc, #128]	; (80004f4 <main+0xf4>)
 8000474:	f000 fd96 	bl	8000fa4 <xTaskGenericCreate>
					NULL );							/* Used to obtain a handle to the created task.  Not used in this simple demo, so set to NULL. */


	/* Create the queue send task in exactly the same way.  Again, this is
	described in the comments at the top of the file. */
	xTaskCreate( 	prvQueueSendTask,
 8000478:	2300      	movs	r3, #0
 800047a:	9303      	str	r3, [sp, #12]
 800047c:	2300      	movs	r3, #0
 800047e:	9302      	str	r3, [sp, #8]
 8000480:	2300      	movs	r3, #0
 8000482:	9301      	str	r3, [sp, #4]
 8000484:	2301      	movs	r3, #1
 8000486:	9300      	str	r3, [sp, #0]
 8000488:	2300      	movs	r3, #0
 800048a:	2246      	movs	r2, #70	; 0x46
 800048c:	491a      	ldr	r1, [pc, #104]	; (80004f8 <main+0xf8>)
 800048e:	481b      	ldr	r0, [pc, #108]	; (80004fc <main+0xfc>)
 8000490:	f000 fd88 	bl	8000fa4 <xTaskGenericCreate>
					NULL );


	/* Create the task that is synchronised with an interrupt using the
	xEventSemaphore semaphore. */
	xTaskCreate( 	prvEventSemaphoreTask,
 8000494:	2300      	movs	r3, #0
 8000496:	9303      	str	r3, [sp, #12]
 8000498:	2300      	movs	r3, #0
 800049a:	9302      	str	r3, [sp, #8]
 800049c:	2300      	movs	r3, #0
 800049e:	9301      	str	r3, [sp, #4]
 80004a0:	2304      	movs	r3, #4
 80004a2:	9300      	str	r3, [sp, #0]
 80004a4:	2300      	movs	r3, #0
 80004a6:	2246      	movs	r2, #70	; 0x46
 80004a8:	4915      	ldr	r1, [pc, #84]	; (8000500 <main+0x100>)
 80004aa:	4816      	ldr	r0, [pc, #88]	; (8000504 <main+0x104>)
 80004ac:	f000 fd7a 	bl	8000fa4 <xTaskGenericCreate>
					NULL );


	/* Create the software timer as described in the comments at the top of
	this file.  http://www.freertos.org/FreeRTOS-timers-xTimerCreate.html. */
	xExampleSoftwareTimer = xTimerCreate( 	( const signed char * ) "LEDTimer", /* A text name, purely to help debugging. */
 80004b0:	4b15      	ldr	r3, [pc, #84]	; (8000508 <main+0x108>)
 80004b2:	9300      	str	r3, [sp, #0]
 80004b4:	2300      	movs	r3, #0
 80004b6:	2201      	movs	r2, #1
 80004b8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80004bc:	4813      	ldr	r0, [pc, #76]	; (800050c <main+0x10c>)
 80004be:	f000 faf1 	bl	8000aa4 <xTimerCreate>
 80004c2:	6078      	str	r0, [r7, #4]

	/* Start the created timer.  A block time of zero is used as the timer
	command queue cannot possibly be full here (this is the first timer to
	be created, and it is not yet running).
	http://www.freertos.org/FreeRTOS-timers-xTimerStart.html */
	xTimerStart( xExampleSoftwareTimer, 0 );
 80004c4:	f000 ff5a 	bl	800137c <xTaskGetTickCount>
 80004c8:	4602      	mov	r2, r0
 80004ca:	2300      	movs	r3, #0
 80004cc:	9300      	str	r3, [sp, #0]
 80004ce:	2300      	movs	r3, #0
 80004d0:	2100      	movs	r1, #0
 80004d2:	6878      	ldr	r0, [r7, #4]
 80004d4:	f000 fb1c 	bl	8000b10 <xTimerGenericCommand>

	/* Start the tasks and timer running. */
	vTaskStartScheduler();
 80004d8:	f000 fe82 	bl	80011e0 <vTaskStartScheduler>
	/* If all is well, the scheduler will now be running, and the following line
	will never be reached.  If the following line does execute, then there was
	insufficient FreeRTOS heap memory available for the idle and/or timer tasks
	to be created.  See the memory management section on the FreeRTOS web site
	for more details.  http://www.freertos.org/a00111.html */
	for( ;; );
 80004dc:	e7fe      	b.n	80004dc <main+0xdc>
 80004de:	bf00      	nop
 80004e0:	20000034 	.word	0x20000034
 80004e4:	0800288c 	.word	0x0800288c
 80004e8:	20000038 	.word	0x20000038
 80004ec:	08002898 	.word	0x08002898
 80004f0:	080028a8 	.word	0x080028a8
 80004f4:	0800056d 	.word	0x0800056d
 80004f8:	080028ac 	.word	0x080028ac
 80004fc:	08000535 	.word	0x08000535
 8000500:	080028b0 	.word	0x080028b0
 8000504:	080005a1 	.word	0x080005a1
 8000508:	08000511 	.word	0x08000511
 800050c:	080028b4 	.word	0x080028b4

08000510 <vExampleTimerCallback>:
}
/*-----------------------------------------------------------*/

static void vExampleTimerCallback( xTimerHandle xTimer )
{
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
	/* The timer has expired.  Count the number of times this happens.  The
	timer that calls this function is an auto re-load timer, so it will
	execute periodically. http://www.freertos.org/RTOS-software-timer.html */
	ulCountOfTimerCallbackExecutions++;
 8000518:	4b05      	ldr	r3, [pc, #20]	; (8000530 <vExampleTimerCallback+0x20>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	3301      	adds	r3, #1
 800051e:	4a04      	ldr	r2, [pc, #16]	; (8000530 <vExampleTimerCallback+0x20>)
 8000520:	6013      	str	r3, [r2, #0]
}
 8000522:	bf00      	nop
 8000524:	370c      	adds	r7, #12
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	2000003c 	.word	0x2000003c

08000534 <prvQueueSendTask>:
/*-----------------------------------------------------------*/

static void prvQueueSendTask( void *pvParameters )
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b084      	sub	sp, #16
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
portTickType xNextWakeTime;
const uint32_t ulValueToSend = 100UL;
 800053c:	2364      	movs	r3, #100	; 0x64
 800053e:	60bb      	str	r3, [r7, #8]

	/* Initialise xNextWakeTime - this only needs to be done once. */
	xNextWakeTime = xTaskGetTickCount();
 8000540:	f000 ff1c 	bl	800137c <xTaskGetTickCount>
 8000544:	4603      	mov	r3, r0
 8000546:	60fb      	str	r3, [r7, #12]
	{
		/* Place this task in the blocked state until it is time to run again.
		The block time is specified in ticks, the constant used converts ticks
		to ms.  While in the Blocked state this task will not consume any CPU
		time.  http://www.freertos.org/vtaskdelayuntil.html */
		vTaskDelayUntil( &xNextWakeTime, mainQUEUE_SEND_PERIOD_MS );
 8000548:	f107 030c 	add.w	r3, r7, #12
 800054c:	21c8      	movs	r1, #200	; 0xc8
 800054e:	4618      	mov	r0, r3
 8000550:	f000 fdea 	bl	8001128 <vTaskDelayUntil>

		/* Send to the queue - causing the queue receive task to unblock and
		increment its counter.  0 is used as the block time so the sending
		operation will not block - it shouldn't need to block as the queue
		should always be empty at this point in the code. */
		xQueueSend( xQueue, &ulValueToSend, 0 );
 8000554:	4b04      	ldr	r3, [pc, #16]	; (8000568 <prvQueueSendTask+0x34>)
 8000556:	6818      	ldr	r0, [r3, #0]
 8000558:	f107 0108 	add.w	r1, r7, #8
 800055c:	2300      	movs	r3, #0
 800055e:	2200      	movs	r2, #0
 8000560:	f001 fc0e 	bl	8001d80 <xQueueGenericSend>
	}
 8000564:	e7f0      	b.n	8000548 <prvQueueSendTask+0x14>
 8000566:	bf00      	nop
 8000568:	20000034 	.word	0x20000034

0800056c <prvQueueReceiveTask>:
}
/*-----------------------------------------------------------*/

static void prvQueueReceiveTask( void *pvParameters )
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
	for( ;; )
	{
		/* Wait until something arrives in the queue - this task will block
		indefinitely provided INCLUDE_vTaskSuspend is set to 1 in
		FreeRTOSConfig.h.  http://www.freertos.org/a00118.html */
		xQueueReceive( xQueue, &ulReceivedValue, portMAX_DELAY );
 8000574:	4b08      	ldr	r3, [pc, #32]	; (8000598 <prvQueueReceiveTask+0x2c>)
 8000576:	6818      	ldr	r0, [r3, #0]
 8000578:	f107 010c 	add.w	r1, r7, #12
 800057c:	2300      	movs	r3, #0
 800057e:	f04f 32ff 	mov.w	r2, #4294967295
 8000582:	f001 fcf5 	bl	8001f70 <xQueueGenericReceive>

		/*  To get here something must have been received from the queue, but
		is it the expected value?  If it is, increment the counter. */
		if( ulReceivedValue == 100UL )
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	2b64      	cmp	r3, #100	; 0x64
 800058a:	d1f3      	bne.n	8000574 <prvQueueReceiveTask+0x8>
		{
			/* Count the number of items that have been received correctly. */
			ulCountOfItemsReceivedOnQueue++;
 800058c:	4b03      	ldr	r3, [pc, #12]	; (800059c <prvQueueReceiveTask+0x30>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	3301      	adds	r3, #1
 8000592:	4a02      	ldr	r2, [pc, #8]	; (800059c <prvQueueReceiveTask+0x30>)
 8000594:	6013      	str	r3, [r2, #0]
		}
	}
 8000596:	e7ed      	b.n	8000574 <prvQueueReceiveTask+0x8>
 8000598:	20000034 	.word	0x20000034
 800059c:	20000040 	.word	0x20000040

080005a0 <prvEventSemaphoreTask>:
}
/*-----------------------------------------------------------*/

static void prvEventSemaphoreTask( void *pvParameters )
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
	for( ;; )
	{
		/* Block until the semaphore is 'given'. */
		xSemaphoreTake( xEventSemaphore, portMAX_DELAY );
 80005a8:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <prvEventSemaphoreTask+0x24>)
 80005aa:	6818      	ldr	r0, [r3, #0]
 80005ac:	2300      	movs	r3, #0
 80005ae:	f04f 32ff 	mov.w	r2, #4294967295
 80005b2:	2100      	movs	r1, #0
 80005b4:	f001 fcdc 	bl	8001f70 <xQueueGenericReceive>

		/* Count the number of times the semaphore is received. */
		ulCountOfReceivedSemaphores++;
 80005b8:	4b03      	ldr	r3, [pc, #12]	; (80005c8 <prvEventSemaphoreTask+0x28>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	3301      	adds	r3, #1
 80005be:	4a02      	ldr	r2, [pc, #8]	; (80005c8 <prvEventSemaphoreTask+0x28>)
 80005c0:	6013      	str	r3, [r2, #0]
	}
 80005c2:	e7f1      	b.n	80005a8 <prvEventSemaphoreTask+0x8>
 80005c4:	20000038 	.word	0x20000038
 80005c8:	20000044 	.word	0x20000044

080005cc <vApplicationTickHook>:
}
/*-----------------------------------------------------------*/

void vApplicationTickHook( void )
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 80005d2:	2300      	movs	r3, #0
 80005d4:	607b      	str	r3, [r7, #4]

	/* The RTOS tick hook function is enabled by setting configUSE_TICK_HOOK to
	1 in FreeRTOSConfig.h.

	"Give" the semaphore on every 500th tick interrupt. */
	ulCount++;
 80005d6:	4b0c      	ldr	r3, [pc, #48]	; (8000608 <vApplicationTickHook+0x3c>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	3301      	adds	r3, #1
 80005dc:	4a0a      	ldr	r2, [pc, #40]	; (8000608 <vApplicationTickHook+0x3c>)
 80005de:	6013      	str	r3, [r2, #0]
	if( ulCount >= 500UL )
 80005e0:	4b09      	ldr	r3, [pc, #36]	; (8000608 <vApplicationTickHook+0x3c>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80005e8:	d309      	bcc.n	80005fe <vApplicationTickHook+0x32>

		xHigherPriorityTaskWoken was initialised to pdFALSE, and will be set to
		pdTRUE by xSemaphoreGiveFromISR() if giving the semaphore unblocked a
		task that has equal or higher priority than the interrupted task.
		http://www.freertos.org/a00124.html */
		xSemaphoreGiveFromISR( xEventSemaphore, &xHigherPriorityTaskWoken );
 80005ea:	4b08      	ldr	r3, [pc, #32]	; (800060c <vApplicationTickHook+0x40>)
 80005ec:	6818      	ldr	r0, [r3, #0]
 80005ee:	1d3a      	adds	r2, r7, #4
 80005f0:	2300      	movs	r3, #0
 80005f2:	2100      	movs	r1, #0
 80005f4:	f001 fc60 	bl	8001eb8 <xQueueGenericSendFromISR>
		ulCount = 0UL;
 80005f8:	4b03      	ldr	r3, [pc, #12]	; (8000608 <vApplicationTickHook+0x3c>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
	are using.  http://www.freertos.org/a00090.html

	In this case, the function is running in the context of the tick interrupt,
	which will automatically check for the higher priority task to run anyway,
	so no further action is required. */
}
 80005fe:	bf00      	nop
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	20000048 	.word	0x20000048
 800060c:	20000038 	.word	0x20000038

08000610 <vApplicationMallocFailedHook>:
/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
	Called if a call to pvPortMalloc() fails because there is insufficient
	free memory available in the FreeRTOS heap.  pvPortMalloc() is called
	internally by FreeRTOS API functions that create tasks, queues, software 
	timers, and semaphores.  The size of the FreeRTOS heap is set by the
	configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */
	for( ;; );
 8000614:	e7fe      	b.n	8000614 <vApplicationMallocFailedHook+0x4>
 8000616:	bf00      	nop

08000618 <vApplicationStackOverflowHook>:
}
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( xTaskHandle pxTask, signed char *pcTaskName )
{
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
 8000620:	6039      	str	r1, [r7, #0]
	/* Run time stack overflow checking is performed if
	configconfigCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected.  pxCurrentTCB can be
	inspected in the debugger if the task name passed into this function is
	corrupt. */
	for( ;; );
 8000622:	e7fe      	b.n	8000622 <vApplicationStackOverflowHook+0xa>

08000624 <vApplicationIdleHook>:
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
	FreeRTOSConfig.h.

	This function is called on each cycle of the idle task.  In this case it
	does nothing useful, other than report the amount of FreeRTOS heap that
	remains unallocated. */
	xFreeStackSpace = xPortGetFreeHeapSize();
 800062a:	f001 ff03 	bl	8002434 <xPortGetFreeHeapSize>
 800062e:	4603      	mov	r3, r0
 8000630:	607b      	str	r3, [r7, #4]

	if( xFreeStackSpace > 100 )
 8000632:	687b      	ldr	r3, [r7, #4]
		/* By now, the kernel has allocated everything it is going to, so
		if there is a lot of heap remaining unallocated then
		the value of configTOTAL_HEAP_SIZE in FreeRTOSConfig.h can be
		reduced accordingly. */
	}
}
 8000634:	bf00      	nop
 8000636:	3708      	adds	r7, #8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <prvSetupHardware>:
/*-----------------------------------------------------------*/

static void prvSetupHardware( void )
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
	/* Ensure all priority bits are assigned as preemption priority bits.
	http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	NVIC_SetPriorityGrouping( 0 );
 8000640:	2000      	movs	r0, #0
 8000642:	f7ff feb9 	bl	80003b8 <NVIC_SetPriorityGrouping>

	/* TODO: Setup the clocks, etc. here, if they were not configured before
	main() was called. */
}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop

0800064c <EVAL_AUDIO_TransferComplete_CallBack>:
/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
__attribute__((weak)) void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	6039      	str	r1, [r7, #0]
  /* TODO, implement your code here */
  return;
 8000656:	bf00      	nop
}
 8000658:	370c      	adds	r7, #12
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop

08000664 <EVAL_AUDIO_GetSampleCallBack>:
/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
__attribute__((weak)) uint16_t EVAL_AUDIO_GetSampleCallBack(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  return;
 8000668:	bf00      	nop
 800066a:	bf00      	nop
}
 800066c:	4618      	mov	r0, r3
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 800067c:	4b37      	ldr	r3, [pc, #220]	; (800075c <Audio_MAL_IRQHandler+0xe4>)
 800067e:	681a      	ldr	r2, [r3, #0]
 8000680:	4b37      	ldr	r3, [pc, #220]	; (8000760 <Audio_MAL_IRQHandler+0xe8>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4619      	mov	r1, r3
 8000686:	4610      	mov	r0, r2
 8000688:	f000 f958 	bl	800093c <DMA_GetFlagStatus>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d062      	beq.n	8000758 <Audio_MAL_IRQHandler+0xe0>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 8000692:	4b34      	ldr	r3, [pc, #208]	; (8000764 <Audio_MAL_IRQHandler+0xec>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d04a      	beq.n	8000730 <Audio_MAL_IRQHandler+0xb8>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 800069a:	bf00      	nop
 800069c:	4b2f      	ldr	r3, [pc, #188]	; (800075c <Audio_MAL_IRQHandler+0xe4>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4618      	mov	r0, r3
 80006a2:	f000 f933 	bl	800090c <DMA_GetCmdStatus>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d1f7      	bne.n	800069c <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 80006ac:	4b2b      	ldr	r3, [pc, #172]	; (800075c <Audio_MAL_IRQHandler+0xe4>)
 80006ae:	681a      	ldr	r2, [r3, #0]
 80006b0:	4b2b      	ldr	r3, [pc, #172]	; (8000760 <Audio_MAL_IRQHandler+0xe8>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4619      	mov	r1, r3
 80006b6:	4610      	mov	r0, r2
 80006b8:	f000 f97c 	bl	80009b4 <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 80006bc:	4b2a      	ldr	r3, [pc, #168]	; (8000768 <Audio_MAL_IRQHandler+0xf0>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	461a      	mov	r2, r3
 80006c2:	4b2a      	ldr	r3, [pc, #168]	; (800076c <Audio_MAL_IRQHandler+0xf4>)
 80006c4:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 80006c6:	4b27      	ldr	r3, [pc, #156]	; (8000764 <Audio_MAL_IRQHandler+0xec>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006ce:	4293      	cmp	r3, r2
 80006d0:	bf28      	it	cs
 80006d2:	4613      	movcs	r3, r2
 80006d4:	4a25      	ldr	r2, [pc, #148]	; (800076c <Audio_MAL_IRQHandler+0xf4>)
 80006d6:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 80006d8:	4b20      	ldr	r3, [pc, #128]	; (800075c <Audio_MAL_IRQHandler+0xe4>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4923      	ldr	r1, [pc, #140]	; (800076c <Audio_MAL_IRQHandler+0xf4>)
 80006de:	4618      	mov	r0, r3
 80006e0:	f000 f8a0 	bl	8000824 <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 80006e4:	4b1d      	ldr	r3, [pc, #116]	; (800075c <Audio_MAL_IRQHandler+0xe4>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	2101      	movs	r1, #1
 80006ea:	4618      	mov	r0, r3
 80006ec:	f000 f8f2 	bl	80008d4 <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 80006f0:	4b1d      	ldr	r3, [pc, #116]	; (8000768 <Audio_MAL_IRQHandler+0xf0>)
 80006f2:	681a      	ldr	r2, [r3, #0]
 80006f4:	4b1b      	ldr	r3, [pc, #108]	; (8000764 <Audio_MAL_IRQHandler+0xec>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80006fc:	428b      	cmp	r3, r1
 80006fe:	bf28      	it	cs
 8000700:	460b      	movcs	r3, r1
 8000702:	005b      	lsls	r3, r3, #1
 8000704:	4413      	add	r3, r2
 8000706:	4a18      	ldr	r2, [pc, #96]	; (8000768 <Audio_MAL_IRQHandler+0xf0>)
 8000708:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 800070a:	4b16      	ldr	r3, [pc, #88]	; (8000764 <Audio_MAL_IRQHandler+0xec>)
 800070c:	681a      	ldr	r2, [r3, #0]
 800070e:	4b15      	ldr	r3, [pc, #84]	; (8000764 <Audio_MAL_IRQHandler+0xec>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000716:	428b      	cmp	r3, r1
 8000718:	bf28      	it	cs
 800071a:	460b      	movcs	r3, r1
 800071c:	1ad3      	subs	r3, r2, r3
 800071e:	4a11      	ldr	r2, [pc, #68]	; (8000764 <Audio_MAL_IRQHandler+0xec>)
 8000720:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 8000722:	4b0e      	ldr	r3, [pc, #56]	; (800075c <Audio_MAL_IRQHandler+0xe4>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	2101      	movs	r1, #1
 8000728:	4618      	mov	r0, r3
 800072a:	f000 f8d3 	bl	80008d4 <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 800072e:	e013      	b.n	8000758 <Audio_MAL_IRQHandler+0xe0>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
    }
    else
    {
      /* Disable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 8000730:	4b0a      	ldr	r3, [pc, #40]	; (800075c <Audio_MAL_IRQHandler+0xe4>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	2100      	movs	r1, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f000 f8cc 	bl	80008d4 <DMA_Cmd>
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 800073c:	4b07      	ldr	r3, [pc, #28]	; (800075c <Audio_MAL_IRQHandler+0xe4>)
 800073e:	681a      	ldr	r2, [r3, #0]
 8000740:	4b07      	ldr	r3, [pc, #28]	; (8000760 <Audio_MAL_IRQHandler+0xe8>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4619      	mov	r1, r3
 8000746:	4610      	mov	r0, r2
 8000748:	f000 f934 	bl	80009b4 <DMA_ClearFlag>
      
      /* Manage the remaining file size and new address offset: This function 
      should be coded by user (its prototype is already declared in stm32f4_discovery_audio_codec.h) */  
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 800074c:	4b06      	ldr	r3, [pc, #24]	; (8000768 <Audio_MAL_IRQHandler+0xf0>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f7ff ff7a 	bl	800064c <EVAL_AUDIO_TransferComplete_CallBack>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}
 800075c:	20000008 	.word	0x20000008
 8000760:	2000000c 	.word	0x2000000c
 8000764:	20000000 	.word	0x20000000
 8000768:	20001d8c 	.word	0x20001d8c
 800076c:	20001dcc 	.word	0x20001dcc

08000770 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8000774:	f7ff ff80 	bl	8000678 <Audio_MAL_IRQHandler>
}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}

0800077c <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8000780:	f7ff ff7a 	bl	8000678 <Audio_MAL_IRQHandler>
}
 8000784:	bf00      	nop
 8000786:	bd80      	pop	{r7, pc}

08000788 <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 800078c:	2102      	movs	r1, #2
 800078e:	480d      	ldr	r0, [pc, #52]	; (80007c4 <SPI3_IRQHandler+0x3c>)
 8000790:	f000 f82c 	bl	80007ec <SPI_I2S_GetFlagStatus>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d011      	beq.n	80007be <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 800079a:	4b0b      	ldr	r3, [pc, #44]	; (80007c8 <SPI3_IRQHandler+0x40>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	2b02      	cmp	r3, #2
 80007a0:	d106      	bne.n	80007b0 <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 80007a2:	f7ff ff5f 	bl	8000664 <EVAL_AUDIO_GetSampleCallBack>
 80007a6:	4603      	mov	r3, r0
 80007a8:	4619      	mov	r1, r3
 80007aa:	2004      	movs	r0, #4
 80007ac:	f000 f930 	bl	8000a10 <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 80007b0:	f7ff ff58 	bl	8000664 <EVAL_AUDIO_GetSampleCallBack>
 80007b4:	4603      	mov	r3, r0
 80007b6:	4619      	mov	r1, r3
 80007b8:	4802      	ldr	r0, [pc, #8]	; (80007c4 <SPI3_IRQHandler+0x3c>)
 80007ba:	f000 f807 	bl	80007cc <SPI_I2S_SendData>
  }
}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40003c00 	.word	0x40003c00
 80007c8:	20000004 	.word	0x20000004

080007cc <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	460b      	mov	r3, r1
 80007d6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	887a      	ldrh	r2, [r7, #2]
 80007dc:	819a      	strh	r2, [r3, #12]
}
 80007de:	bf00      	nop
 80007e0:	370c      	adds	r7, #12
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop

080007ec <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b085      	sub	sp, #20
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	460b      	mov	r3, r1
 80007f6:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80007f8:	2300      	movs	r3, #0
 80007fa:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	891b      	ldrh	r3, [r3, #8]
 8000800:	b29a      	uxth	r2, r3
 8000802:	887b      	ldrh	r3, [r7, #2]
 8000804:	4013      	ands	r3, r2
 8000806:	b29b      	uxth	r3, r3
 8000808:	2b00      	cmp	r3, #0
 800080a:	d002      	beq.n	8000812 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 800080c:	2301      	movs	r3, #1
 800080e:	73fb      	strb	r3, [r7, #15]
 8000810:	e001      	b.n	8000816 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8000812:	2300      	movs	r3, #0
 8000814:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8000816:	7bfb      	ldrb	r3, [r7, #15]
}
 8000818:	4618      	mov	r0, r3
 800081a:	3714      	adds	r7, #20
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr

08000824 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000824:	b480      	push	{r7}
 8000826:	b085      	sub	sp, #20
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800082e:	2300      	movs	r3, #0
 8000830:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000838:	68fa      	ldr	r2, [r7, #12]
 800083a:	4b25      	ldr	r3, [pc, #148]	; (80008d0 <DMA_Init+0xac>)
 800083c:	4013      	ands	r3, r2
 800083e:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	681a      	ldr	r2, [r3, #0]
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	68db      	ldr	r3, [r3, #12]
 8000848:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	695b      	ldr	r3, [r3, #20]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800084e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	699b      	ldr	r3, [r3, #24]
 8000854:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	69db      	ldr	r3, [r3, #28]
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800085a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	6a1b      	ldr	r3, [r3, #32]
 8000860:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000866:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800086c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000872:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000878:	4313      	orrs	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800087a:	68fa      	ldr	r2, [r7, #12]
 800087c:	4313      	orrs	r3, r2
 800087e:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	68fa      	ldr	r2, [r7, #12]
 8000884:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	695b      	ldr	r3, [r3, #20]
 800088a:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	f023 0307 	bic.w	r3, r3, #7
 8000892:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089c:	4313      	orrs	r3, r2
 800089e:	68fa      	ldr	r2, [r7, #12]
 80008a0:	4313      	orrs	r3, r2
 80008a2:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	68fa      	ldr	r2, [r7, #12]
 80008a8:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	691a      	ldr	r2, [r3, #16]
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	685a      	ldr	r2, [r3, #4]
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	689a      	ldr	r2, [r3, #8]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	60da      	str	r2, [r3, #12]
}
 80008c2:	bf00      	nop
 80008c4:	3714      	adds	r7, #20
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	f01c803f 	.word	0xf01c803f

080008d4 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
 80008dc:	460b      	mov	r3, r1
 80008de:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80008e0:	78fb      	ldrb	r3, [r7, #3]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d006      	beq.n	80008f4 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	f043 0201 	orr.w	r2, r3, #1
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 80008f2:	e005      	b.n	8000900 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f023 0201 	bic.w	r2, r3, #1
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	601a      	str	r2, [r3, #0]
  }
}
 8000900:	bf00      	nop
 8000902:	370c      	adds	r7, #12
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr

0800090c <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 800090c:	b480      	push	{r7}
 800090e:	b085      	sub	sp, #20
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 8000914:	2300      	movs	r3, #0
 8000916:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f003 0301 	and.w	r3, r3, #1
 8000920:	2b00      	cmp	r3, #0
 8000922:	d002      	beq.n	800092a <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8000924:	2301      	movs	r3, #1
 8000926:	73fb      	strb	r3, [r7, #15]
 8000928:	e001      	b.n	800092e <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 800092a:	2300      	movs	r3, #0
 800092c:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 800092e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000930:	4618      	mov	r0, r3
 8000932:	3714      	adds	r7, #20
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr

0800093c <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 800093c:	b480      	push	{r7}
 800093e:	b087      	sub	sp, #28
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8000946:	2300      	movs	r3, #0
 8000948:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 800094a:	2300      	movs	r3, #0
 800094c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	4a15      	ldr	r2, [pc, #84]	; (80009a8 <DMA_GetFlagStatus+0x6c>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d802      	bhi.n	800095c <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8000956:	4b15      	ldr	r3, [pc, #84]	; (80009ac <DMA_GetFlagStatus+0x70>)
 8000958:	613b      	str	r3, [r7, #16]
 800095a:	e001      	b.n	8000960 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 800095c:	4b14      	ldr	r3, [pc, #80]	; (80009b0 <DMA_GetFlagStatus+0x74>)
 800095e:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000966:	2b00      	cmp	r3, #0
 8000968:	d003      	beq.n	8000972 <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 800096a:	693b      	ldr	r3, [r7, #16]
 800096c:	685b      	ldr	r3, [r3, #4]
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	e002      	b.n	8000978 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8000972:	693b      	ldr	r3, [r7, #16]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800097e:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000982:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8000984:	68fa      	ldr	r2, [r7, #12]
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	4013      	ands	r3, r2
 800098a:	2b00      	cmp	r3, #0
 800098c:	d002      	beq.n	8000994 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 800098e:	2301      	movs	r3, #1
 8000990:	75fb      	strb	r3, [r7, #23]
 8000992:	e001      	b.n	8000998 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8000994:	2300      	movs	r3, #0
 8000996:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8000998:	7dfb      	ldrb	r3, [r7, #23]
}
 800099a:	4618      	mov	r0, r3
 800099c:	371c      	adds	r7, #28
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	4002640f 	.word	0x4002640f
 80009ac:	40026000 	.word	0x40026000
 80009b0:	40026400 	.word	0x40026400

080009b4 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b085      	sub	sp, #20
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
 80009bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4a10      	ldr	r2, [pc, #64]	; (8000a04 <DMA_ClearFlag+0x50>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d802      	bhi.n	80009cc <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80009c6:	4b10      	ldr	r3, [pc, #64]	; (8000a08 <DMA_ClearFlag+0x54>)
 80009c8:	60fb      	str	r3, [r7, #12]
 80009ca:	e001      	b.n	80009d0 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80009cc:	4b0f      	ldr	r3, [pc, #60]	; (8000a0c <DMA_ClearFlag+0x58>)
 80009ce:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d007      	beq.n	80009ea <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80009e0:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80009e4:	68fa      	ldr	r2, [r7, #12]
 80009e6:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 80009e8:	e006      	b.n	80009f8 <DMA_ClearFlag+0x44>
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80009f0:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80009f4:	68fa      	ldr	r2, [r7, #12]
 80009f6:	6093      	str	r3, [r2, #8]
  }    
}
 80009f8:	bf00      	nop
 80009fa:	3714      	adds	r7, #20
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr
 8000a04:	4002640f 	.word	0x4002640f
 8000a08:	40026000 	.word	0x40026000
 8000a0c:	40026400 	.word	0x40026400

08000a10 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 8000a10:	b480      	push	{r7}
 8000a12:	b085      	sub	sp, #20
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
 8000a18:	460b      	mov	r3, r1
 8000a1a:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 8000a20:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <DAC_SetChannel1Data+0x34>)
 8000a22:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 8000a24:	68fa      	ldr	r2, [r7, #12]
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4413      	add	r3, r2
 8000a2a:	3308      	adds	r3, #8
 8000a2c:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	461a      	mov	r2, r3
 8000a32:	887b      	ldrh	r3, [r7, #2]
 8000a34:	6013      	str	r3, [r2, #0]
}
 8000a36:	bf00      	nop
 8000a38:	3714      	adds	r7, #20
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	40007400 	.word	0x40007400

08000a48 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b086      	sub	sp, #24
 8000a4c:	af04      	add	r7, sp, #16
portBASE_TYPE xReturn = pdFAIL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8000a52:	f000 fa7d 	bl	8000f50 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8000a56:	4b10      	ldr	r3, [pc, #64]	; (8000a98 <xTimerCreateTimerTask+0x50>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d00e      	beq.n	8000a7c <xTimerCreateTimerTask+0x34>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );	
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 8000a5e:	2300      	movs	r3, #0
 8000a60:	9303      	str	r3, [sp, #12]
 8000a62:	2300      	movs	r3, #0
 8000a64:	9302      	str	r3, [sp, #8]
 8000a66:	2300      	movs	r3, #0
 8000a68:	9301      	str	r3, [sp, #4]
 8000a6a:	2303      	movs	r3, #3
 8000a6c:	9300      	str	r3, [sp, #0]
 8000a6e:	2300      	movs	r3, #0
 8000a70:	2246      	movs	r2, #70	; 0x46
 8000a72:	490a      	ldr	r1, [pc, #40]	; (8000a9c <xTimerCreateTimerTask+0x54>)
 8000a74:	480a      	ldr	r0, [pc, #40]	; (8000aa0 <xTimerCreateTimerTask+0x58>)
 8000a76:	f000 fa95 	bl	8000fa4 <xTaskGenericCreate>
 8000a7a:	6078      	str	r0, [r7, #4]
		}
		#endif
	}

	configASSERT( xReturn );
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d104      	bne.n	8000a8c <xTimerCreateTimerTask+0x44>
 8000a82:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000a86:	f380 8811 	msr	BASEPRI, r0
 8000a8a:	e7fe      	b.n	8000a8a <xTimerCreateTimerTask+0x42>
	return xReturn;
 8000a8c:	687b      	ldr	r3, [r7, #4]
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	2000007c 	.word	0x2000007c
 8000a9c:	080028c0 	.word	0x080028c0
 8000aa0:	08000c05 	.word	0x08000c05

08000aa4 <xTimerCreate>:
/*-----------------------------------------------------------*/

xTimerHandle xTimerCreate( const signed char *pcTimerName, portTickType xTimerPeriodInTicks, unsigned portBASE_TYPE uxAutoReload, void *pvTimerID, tmrTIMER_CALLBACK pxCallbackFunction )
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b086      	sub	sp, #24
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	60f8      	str	r0, [r7, #12]
 8000aac:	60b9      	str	r1, [r7, #8]
 8000aae:	607a      	str	r2, [r7, #4]
 8000ab0:	603b      	str	r3, [r7, #0]
xTIMER *pxNewTimer;

	/* Allocate the timer structure. */
	if( xTimerPeriodInTicks == ( portTickType ) 0U )
 8000ab2:	68bb      	ldr	r3, [r7, #8]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d109      	bne.n	8000acc <xTimerCreate+0x28>
	{
		pxNewTimer = NULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	617b      	str	r3, [r7, #20]
		configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d121      	bne.n	8000b06 <xTimerCreate+0x62>
 8000ac2:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000ac6:	f380 8811 	msr	BASEPRI, r0
 8000aca:	e7fe      	b.n	8000aca <xTimerCreate+0x26>
	}
	else
	{
		pxNewTimer = ( xTIMER * ) pvPortMalloc( sizeof( xTIMER ) );
 8000acc:	2028      	movs	r0, #40	; 0x28
 8000ace:	f001 fc6b 	bl	80023a8 <pvPortMalloc>
 8000ad2:	6178      	str	r0, [r7, #20]
		if( pxNewTimer != NULL )
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d015      	beq.n	8000b06 <xTimerCreate+0x62>
		{
			/* Ensure the infrastructure used by the timer service task has been
			created/initialised. */
			prvCheckForValidListAndQueue();
 8000ada:	f000 fa39 	bl	8000f50 <prvCheckForValidListAndQueue>
	
			/* Initialise the timer structure members using the function parameters. */
			pxNewTimer->pcTimerName = pcTimerName;
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	68fa      	ldr	r2, [r7, #12]
 8000ae2:	601a      	str	r2, [r3, #0]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	68ba      	ldr	r2, [r7, #8]
 8000ae8:	619a      	str	r2, [r3, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	687a      	ldr	r2, [r7, #4]
 8000aee:	61da      	str	r2, [r3, #28]
			pxNewTimer->pvTimerID = pvTimerID;
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	683a      	ldr	r2, [r7, #0]
 8000af4:	621a      	str	r2, [r3, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	6a3a      	ldr	r2, [r7, #32]
 8000afa:	625a      	str	r2, [r3, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	3304      	adds	r3, #4
 8000b00:	4618      	mov	r0, r3
 8000b02:	f001 fdcf 	bl	80026a4 <vListInitialiseItem>
		{
			traceTIMER_CREATE_FAILED();
		}
	}
	
	return ( xTimerHandle ) pxNewTimer;
 8000b06:	697b      	ldr	r3, [r7, #20]
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3718      	adds	r7, #24
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b088      	sub	sp, #32
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	60f8      	str	r0, [r7, #12]
 8000b18:	60b9      	str	r1, [r7, #8]
 8000b1a:	607a      	str	r2, [r7, #4]
 8000b1c:	603b      	str	r3, [r7, #0]
portBASE_TYPE xReturn = pdFAIL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	61fb      	str	r3, [r7, #28]
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8000b22:	4b1a      	ldr	r3, [pc, #104]	; (8000b8c <xTimerGenericCommand+0x7c>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d02a      	beq.n	8000b80 <xTimerGenericCommand+0x70>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	613b      	str	r3, [r7, #16]
		xMessage.xMessageValue = xOptionalValue;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	617b      	str	r3, [r7, #20]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	61bb      	str	r3, [r7, #24]

		if( pxHigherPriorityTaskWoken == NULL )
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d118      	bne.n	8000b6e <xTimerGenericCommand+0x5e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8000b3c:	f000 ffd2 	bl	8001ae4 <xTaskGetSchedulerState>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b01      	cmp	r3, #1
 8000b44:	d109      	bne.n	8000b5a <xTimerGenericCommand+0x4a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
 8000b46:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <xTimerGenericCommand+0x7c>)
 8000b48:	6818      	ldr	r0, [r3, #0]
 8000b4a:	f107 0110 	add.w	r1, r7, #16
 8000b4e:	2300      	movs	r3, #0
 8000b50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b52:	f001 f915 	bl	8001d80 <xQueueGenericSend>
 8000b56:	61f8      	str	r0, [r7, #28]
 8000b58:	e012      	b.n	8000b80 <xTimerGenericCommand+0x70>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8000b5a:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <xTimerGenericCommand+0x7c>)
 8000b5c:	6818      	ldr	r0, [r3, #0]
 8000b5e:	f107 0110 	add.w	r1, r7, #16
 8000b62:	2300      	movs	r3, #0
 8000b64:	2200      	movs	r2, #0
 8000b66:	f001 f90b 	bl	8001d80 <xQueueGenericSend>
 8000b6a:	61f8      	str	r0, [r7, #28]
 8000b6c:	e008      	b.n	8000b80 <xTimerGenericCommand+0x70>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8000b6e:	4b07      	ldr	r3, [pc, #28]	; (8000b8c <xTimerGenericCommand+0x7c>)
 8000b70:	6818      	ldr	r0, [r3, #0]
 8000b72:	f107 0110 	add.w	r1, r7, #16
 8000b76:	2300      	movs	r3, #0
 8000b78:	683a      	ldr	r2, [r7, #0]
 8000b7a:	f001 f99d 	bl	8001eb8 <xQueueGenericSendFromISR>
 8000b7e:	61f8      	str	r0, [r7, #28]
		}
		
		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}
	
	return xReturn;
 8000b80:	69fb      	ldr	r3, [r7, #28]
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3720      	adds	r7, #32
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	2000007c 	.word	0x2000007c

08000b90 <prvProcessExpiredTimer>:
	
#endif
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( portTickType xNextExpireTime, portTickType xTimeNow )
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b086      	sub	sp, #24
 8000b94:	af02      	add	r7, sp, #8
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	6039      	str	r1, [r7, #0]
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8000b9a:	4b19      	ldr	r3, [pc, #100]	; (8000c00 <prvProcessExpiredTimer+0x70>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	68db      	ldr	r3, [r3, #12]
 8000ba0:	68db      	ldr	r3, [r3, #12]
 8000ba2:	60fb      	str	r3, [r7, #12]
	vListRemove( &( pxTimer->xTimerListItem ) );
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	3304      	adds	r3, #4
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f001 fdeb 	bl	8002784 <vListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	69db      	ldr	r3, [r3, #28]
 8000bb2:	2b01      	cmp	r3, #1
 8000bb4:	d11c      	bne.n	8000bf0 <prvProcessExpiredTimer+0x60>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	699a      	ldr	r2, [r3, #24]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	18d1      	adds	r1, r2, r3
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	683a      	ldr	r2, [r7, #0]
 8000bc2:	68f8      	ldr	r0, [r7, #12]
 8000bc4:	f000 f8ac 	bl	8000d20 <prvInsertTimerInActiveList>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b01      	cmp	r3, #1
 8000bcc:	d110      	bne.n	8000bf0 <prvProcessExpiredTimer+0x60>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
 8000bce:	2300      	movs	r3, #0
 8000bd0:	9300      	str	r3, [sp, #0]
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	687a      	ldr	r2, [r7, #4]
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	68f8      	ldr	r0, [r7, #12]
 8000bda:	f7ff ff99 	bl	8000b10 <xTimerGenericCommand>
 8000bde:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d104      	bne.n	8000bf0 <prvProcessExpiredTimer+0x60>
 8000be6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000bea:	f380 8811 	msr	BASEPRI, r0
 8000bee:	e7fe      	b.n	8000bee <prvProcessExpiredTimer+0x5e>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bf4:	68f8      	ldr	r0, [r7, #12]
 8000bf6:	4798      	blx	r3
}
 8000bf8:	bf00      	nop
 8000bfa:	3710      	adds	r7, #16
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	20000074 	.word	0x20000074

08000c04 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8000c0c:	f107 0308 	add.w	r3, r7, #8
 8000c10:	4618      	mov	r0, r3
 8000c12:	f000 f83f 	bl	8000c94 <prvGetNextExpireTime>
 8000c16:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	68f8      	ldr	r0, [r7, #12]
 8000c1e:	f000 f803 	bl	8000c28 <prvProcessTimerOrBlockTask>
		
		/* Empty the command queue. */
		prvProcessReceivedCommands();		
 8000c22:	f000 f8bf 	bl	8000da4 <prvProcessReceivedCommands>
	}
 8000c26:	e7f1      	b.n	8000c0c <prvTimerTask+0x8>

08000c28 <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	6039      	str	r1, [r7, #0]
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
 8000c32:	f000 fb11 	bl	8001258 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8000c36:	f107 0308 	add.w	r3, r7, #8
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f000 f84e 	bl	8000cdc <prvSampleTimeNow>
 8000c40:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d11d      	bne.n	8000c84 <prvProcessTimerOrBlockTask+0x5c>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d10a      	bne.n	8000c64 <prvProcessTimerOrBlockTask+0x3c>
 8000c4e:	687a      	ldr	r2, [r7, #4]
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	429a      	cmp	r2, r3
 8000c54:	d806      	bhi.n	8000c64 <prvProcessTimerOrBlockTask+0x3c>
			{
				xTaskResumeAll();
 8000c56:	f000 fb0d 	bl	8001274 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8000c5a:	68f9      	ldr	r1, [r7, #12]
 8000c5c:	6878      	ldr	r0, [r7, #4]
 8000c5e:	f7ff ff97 	bl	8000b90 <prvProcessExpiredTimer>
		else
		{
			xTaskResumeAll();
		}
	}
}
 8000c62:	e011      	b.n	8000c88 <prvProcessTimerOrBlockTask+0x60>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 8000c64:	4b0a      	ldr	r3, [pc, #40]	; (8000c90 <prvProcessTimerOrBlockTask+0x68>)
 8000c66:	6818      	ldr	r0, [r3, #0]
 8000c68:	687a      	ldr	r2, [r7, #4]
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	1ad3      	subs	r3, r2, r3
 8000c6e:	4619      	mov	r1, r3
 8000c70:	f001 fb70 	bl	8002354 <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
 8000c74:	f000 fafe 	bl	8001274 <xTaskResumeAll>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d104      	bne.n	8000c88 <prvProcessTimerOrBlockTask+0x60>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
 8000c7e:	f001 fc59 	bl	8002534 <vPortYieldFromISR>
		else
		{
			xTaskResumeAll();
		}
	}
}
 8000c82:	e001      	b.n	8000c88 <prvProcessTimerOrBlockTask+0x60>
				}
			}
		}
		else
		{
			xTaskResumeAll();
 8000c84:	f000 faf6 	bl	8001274 <xTaskResumeAll>
		}
	}
}
 8000c88:	bf00      	nop
 8000c8a:	3710      	adds	r7, #16
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	2000007c 	.word	0x2000007c

08000c94 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static portTickType prvGetNextExpireTime( portBASE_TYPE *pxListWasEmpty )
{
 8000c94:	b480      	push	{r7}
 8000c96:	b085      	sub	sp, #20
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8000c9c:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <prvGetNextExpireTime+0x44>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	bf0c      	ite	eq
 8000ca6:	2301      	moveq	r3, #1
 8000ca8:	2300      	movne	r3, #0
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	461a      	mov	r2, r3
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d105      	bne.n	8000cc6 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8000cba:	4b07      	ldr	r3, [pc, #28]	; (8000cd8 <prvGetNextExpireTime+0x44>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	e001      	b.n	8000cca <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8000cca:	68fb      	ldr	r3, [r7, #12]
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3714      	adds	r7, #20
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	20000074 	.word	0x20000074

08000cdc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
 8000ce4:	f000 fb4a 	bl	800137c <xTaskGetTickCount>
 8000ce8:	60f8      	str	r0, [r7, #12]
	
	if( xTimeNow < xLastTime )
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <prvSampleTimeNow+0x40>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	68fa      	ldr	r2, [r7, #12]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d208      	bcs.n	8000d06 <prvSampleTimeNow+0x2a>
	{
		prvSwitchTimerLists( xLastTime );
 8000cf4:	4b09      	ldr	r3, [pc, #36]	; (8000d1c <prvSampleTimeNow+0x40>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f000 f8cd 	bl	8000e98 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2201      	movs	r2, #1
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	e002      	b.n	8000d0c <prvSampleTimeNow+0x30>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
	}
	
	xLastTime = xTimeNow;
 8000d0c:	4a03      	ldr	r2, [pc, #12]	; (8000d1c <prvSampleTimeNow+0x40>)
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	6013      	str	r3, [r2, #0]
	
	return xTimeNow;
 8000d12:	68fb      	ldr	r3, [r7, #12]
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	3710      	adds	r7, #16
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	20000080 	.word	0x20000080

08000d20 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	60f8      	str	r0, [r7, #12]
 8000d28:	60b9      	str	r1, [r7, #8]
 8000d2a:	607a      	str	r2, [r7, #4]
 8000d2c:	603b      	str	r3, [r7, #0]
portBASE_TYPE xProcessTimerNow = pdFALSE;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	68ba      	ldr	r2, [r7, #8]
 8000d36:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	68fa      	ldr	r2, [r7, #12]
 8000d3c:	611a      	str	r2, [r3, #16]
	
	if( xNextExpiryTime <= xTimeNow )
 8000d3e:	68ba      	ldr	r2, [r7, #8]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	429a      	cmp	r2, r3
 8000d44:	d812      	bhi.n	8000d6c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 8000d46:	687a      	ldr	r2, [r7, #4]
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	1ad2      	subs	r2, r2, r3
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	699b      	ldr	r3, [r3, #24]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d302      	bcc.n	8000d5a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8000d54:	2301      	movs	r3, #1
 8000d56:	617b      	str	r3, [r7, #20]
 8000d58:	e01b      	b.n	8000d92 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8000d5a:	4b10      	ldr	r3, [pc, #64]	; (8000d9c <prvInsertTimerInActiveList+0x7c>)
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	3304      	adds	r3, #4
 8000d62:	4619      	mov	r1, r3
 8000d64:	4610      	mov	r0, r2
 8000d66:	f001 fcd3 	bl	8002710 <vListInsert>
 8000d6a:	e012      	b.n	8000d92 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8000d6c:	687a      	ldr	r2, [r7, #4]
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	d206      	bcs.n	8000d82 <prvInsertTimerInActiveList+0x62>
 8000d74:	68ba      	ldr	r2, [r7, #8]
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	d302      	bcc.n	8000d82 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	617b      	str	r3, [r7, #20]
 8000d80:	e007      	b.n	8000d92 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8000d82:	4b07      	ldr	r3, [pc, #28]	; (8000da0 <prvInsertTimerInActiveList+0x80>)
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	3304      	adds	r3, #4
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4610      	mov	r0, r2
 8000d8e:	f001 fcbf 	bl	8002710 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8000d92:	697b      	ldr	r3, [r7, #20]
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3718      	adds	r7, #24
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	20000078 	.word	0x20000078
 8000da0:	20000074 	.word	0x20000074

08000da4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08a      	sub	sp, #40	; 0x28
 8000da8:	af02      	add	r7, sp, #8
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8000daa:	1d3b      	adds	r3, r7, #4
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff ff95 	bl	8000cdc <prvSampleTimeNow>
 8000db2:	61f8      	str	r0, [r7, #28]

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8000db4:	e05f      	b.n	8000e76 <prvProcessReceivedCommands+0xd2>
	{
		pxTimer = xMessage.pxTimer;
 8000db6:	693b      	ldr	r3, [r7, #16]
 8000db8:	61bb      	str	r3, [r7, #24]

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
 8000dba:	69bb      	ldr	r3, [r7, #24]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d008      	beq.n	8000dd2 <prvProcessReceivedCommands+0x2e>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8000dc0:	69bb      	ldr	r3, [r7, #24]
 8000dc2:	695b      	ldr	r3, [r3, #20]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d004      	beq.n	8000dd2 <prvProcessReceivedCommands+0x2e>
			{
				/* The timer is in a list, remove it. */
				vListRemove( &( pxTimer->xTimerListItem ) );
 8000dc8:	69bb      	ldr	r3, [r7, #24]
 8000dca:	3304      	adds	r3, #4
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f001 fcd9 	bl	8002784 <vListRemove>
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );
		
		switch( xMessage.xMessageID )
 8000dd2:	68bb      	ldr	r3, [r7, #8]
 8000dd4:	2b03      	cmp	r3, #3
 8000dd6:	d84d      	bhi.n	8000e74 <prvProcessReceivedCommands+0xd0>
 8000dd8:	a201      	add	r2, pc, #4	; (adr r2, 8000de0 <prvProcessReceivedCommands+0x3c>)
 8000dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dde:	bf00      	nop
 8000de0:	08000df1 	.word	0x08000df1
 8000de4:	08000e77 	.word	0x08000e77
 8000de8:	08000e41 	.word	0x08000e41
 8000dec:	08000e6d 	.word	0x08000e6d
		{
			case tmrCOMMAND_START :	
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
 8000df0:	68fa      	ldr	r2, [r7, #12]
 8000df2:	69bb      	ldr	r3, [r7, #24]
 8000df4:	699b      	ldr	r3, [r3, #24]
 8000df6:	18d1      	adds	r1, r2, r3
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	69fa      	ldr	r2, [r7, #28]
 8000dfc:	69b8      	ldr	r0, [r7, #24]
 8000dfe:	f7ff ff8f 	bl	8000d20 <prvInsertTimerInActiveList>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d136      	bne.n	8000e76 <prvProcessReceivedCommands+0xd2>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 8000e08:	69bb      	ldr	r3, [r7, #24]
 8000e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e0c:	69b8      	ldr	r0, [r7, #24]
 8000e0e:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 8000e10:	69bb      	ldr	r3, [r7, #24]
 8000e12:	69db      	ldr	r3, [r3, #28]
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d12e      	bne.n	8000e76 <prvProcessReceivedCommands+0xd2>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8000e18:	68fa      	ldr	r2, [r7, #12]
 8000e1a:	69bb      	ldr	r3, [r7, #24]
 8000e1c:	699b      	ldr	r3, [r3, #24]
 8000e1e:	441a      	add	r2, r3
 8000e20:	2300      	movs	r3, #0
 8000e22:	9300      	str	r3, [sp, #0]
 8000e24:	2300      	movs	r3, #0
 8000e26:	2100      	movs	r1, #0
 8000e28:	69b8      	ldr	r0, [r7, #24]
 8000e2a:	f7ff fe71 	bl	8000b10 <xTimerGenericCommand>
 8000e2e:	6178      	str	r0, [r7, #20]
						configASSERT( xResult );
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d11f      	bne.n	8000e76 <prvProcessReceivedCommands+0xd2>
 8000e36:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000e3a:	f380 8811 	msr	BASEPRI, r0
 8000e3e:	e7fe      	b.n	8000e3e <prvProcessReceivedCommands+0x9a>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
 8000e40:	68fa      	ldr	r2, [r7, #12]
 8000e42:	69bb      	ldr	r3, [r7, #24]
 8000e44:	619a      	str	r2, [r3, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8000e46:	69bb      	ldr	r3, [r7, #24]
 8000e48:	699b      	ldr	r3, [r3, #24]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d104      	bne.n	8000e58 <prvProcessReceivedCommands+0xb4>
 8000e4e:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000e52:	f380 8811 	msr	BASEPRI, r0
 8000e56:	e7fe      	b.n	8000e56 <prvProcessReceivedCommands+0xb2>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8000e58:	69bb      	ldr	r3, [r7, #24]
 8000e5a:	699a      	ldr	r2, [r3, #24]
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	18d1      	adds	r1, r2, r3
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	69fa      	ldr	r2, [r7, #28]
 8000e64:	69b8      	ldr	r0, [r7, #24]
 8000e66:	f7ff ff5b 	bl	8000d20 <prvInsertTimerInActiveList>
				break;
 8000e6a:	e004      	b.n	8000e76 <prvProcessReceivedCommands+0xd2>

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
 8000e6c:	69b8      	ldr	r0, [r7, #24]
 8000e6e:	f001 fad7 	bl	8002420 <vPortFree>
				break;
 8000e72:	e000      	b.n	8000e76 <prvProcessReceivedCommands+0xd2>

			default	:			
				/* Don't expect to get here. */
				break;
 8000e74:	bf00      	nop

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8000e76:	4b07      	ldr	r3, [pc, #28]	; (8000e94 <prvProcessReceivedCommands+0xf0>)
 8000e78:	6818      	ldr	r0, [r3, #0]
 8000e7a:	f107 0108 	add.w	r1, r7, #8
 8000e7e:	2300      	movs	r3, #0
 8000e80:	2200      	movs	r2, #0
 8000e82:	f001 f875 	bl	8001f70 <xQueueGenericReceive>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d194      	bne.n	8000db6 <prvProcessReceivedCommands+0x12>
			default	:			
				/* Don't expect to get here. */
				break;
		}
	}
}
 8000e8c:	bf00      	nop
 8000e8e:	3720      	adds	r7, #32
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	2000007c 	.word	0x2000007c

08000e98 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( portTickType xLastTime )
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08a      	sub	sp, #40	; 0x28
 8000e9c:	af02      	add	r7, sp, #8
 8000e9e:	6078      	str	r0, [r7, #4]
	
	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8000ea0:	e03f      	b.n	8000f22 <prvSwitchTimerLists+0x8a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8000ea2:	4b29      	ldr	r3, [pc, #164]	; (8000f48 <prvSwitchTimerLists+0xb0>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	61fb      	str	r3, [r7, #28]

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8000eac:	4b26      	ldr	r3, [pc, #152]	; (8000f48 <prvSwitchTimerLists+0xb0>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	68db      	ldr	r3, [r3, #12]
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	61bb      	str	r3, [r7, #24]
		vListRemove( &( pxTimer->xTimerListItem ) );
 8000eb6:	69bb      	ldr	r3, [r7, #24]
 8000eb8:	3304      	adds	r3, #4
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f001 fc62 	bl	8002784 <vListRemove>

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 8000ec0:	69bb      	ldr	r3, [r7, #24]
 8000ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ec4:	69b8      	ldr	r0, [r7, #24]
 8000ec6:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 8000ec8:	69bb      	ldr	r3, [r7, #24]
 8000eca:	69db      	ldr	r3, [r3, #28]
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d128      	bne.n	8000f22 <prvSwitchTimerLists+0x8a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8000ed0:	69bb      	ldr	r3, [r7, #24]
 8000ed2:	699a      	ldr	r2, [r3, #24]
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	4413      	add	r3, r2
 8000ed8:	617b      	str	r3, [r7, #20]
			if( xReloadTime > xNextExpireTime )
 8000eda:	697a      	ldr	r2, [r7, #20]
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	d90e      	bls.n	8000f00 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8000ee2:	69bb      	ldr	r3, [r7, #24]
 8000ee4:	697a      	ldr	r2, [r7, #20]
 8000ee6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8000ee8:	69bb      	ldr	r3, [r7, #24]
 8000eea:	69ba      	ldr	r2, [r7, #24]
 8000eec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8000eee:	4b16      	ldr	r3, [pc, #88]	; (8000f48 <prvSwitchTimerLists+0xb0>)
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	69bb      	ldr	r3, [r7, #24]
 8000ef4:	3304      	adds	r3, #4
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4610      	mov	r0, r2
 8000efa:	f001 fc09 	bl	8002710 <vListInsert>
 8000efe:	e010      	b.n	8000f22 <prvSwitchTimerLists+0x8a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
 8000f00:	2300      	movs	r3, #0
 8000f02:	9300      	str	r3, [sp, #0]
 8000f04:	2300      	movs	r3, #0
 8000f06:	69fa      	ldr	r2, [r7, #28]
 8000f08:	2100      	movs	r1, #0
 8000f0a:	69b8      	ldr	r0, [r7, #24]
 8000f0c:	f7ff fe00 	bl	8000b10 <xTimerGenericCommand>
 8000f10:	6138      	str	r0, [r7, #16]
				configASSERT( xResult );
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d104      	bne.n	8000f22 <prvSwitchTimerLists+0x8a>
 8000f18:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000f1c:	f380 8811 	msr	BASEPRI, r0
 8000f20:	e7fe      	b.n	8000f20 <prvSwitchTimerLists+0x88>
	
	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8000f22:	4b09      	ldr	r3, [pc, #36]	; (8000f48 <prvSwitchTimerLists+0xb0>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d1ba      	bne.n	8000ea2 <prvSwitchTimerLists+0xa>
				( void ) xResult;
			}
		}
	}

	pxTemp = pxCurrentTimerList;
 8000f2c:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <prvSwitchTimerLists+0xb0>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	60fb      	str	r3, [r7, #12]
	pxCurrentTimerList = pxOverflowTimerList;
 8000f32:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <prvSwitchTimerLists+0xb4>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a04      	ldr	r2, [pc, #16]	; (8000f48 <prvSwitchTimerLists+0xb0>)
 8000f38:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8000f3a:	4a04      	ldr	r2, [pc, #16]	; (8000f4c <prvSwitchTimerLists+0xb4>)
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	6013      	str	r3, [r2, #0]
}
 8000f40:	bf00      	nop
 8000f42:	3720      	adds	r7, #32
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	20000074 	.word	0x20000074
 8000f4c:	20000078 	.word	0x20000078

08000f50 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8000f54:	f001 fafc 	bl	8002550 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8000f58:	4b0d      	ldr	r3, [pc, #52]	; (8000f90 <prvCheckForValidListAndQueue+0x40>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d113      	bne.n	8000f88 <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
 8000f60:	480c      	ldr	r0, [pc, #48]	; (8000f94 <prvCheckForValidListAndQueue+0x44>)
 8000f62:	f001 fb7f 	bl	8002664 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8000f66:	480c      	ldr	r0, [pc, #48]	; (8000f98 <prvCheckForValidListAndQueue+0x48>)
 8000f68:	f001 fb7c 	bl	8002664 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8000f6c:	4b0b      	ldr	r3, [pc, #44]	; (8000f9c <prvCheckForValidListAndQueue+0x4c>)
 8000f6e:	4a09      	ldr	r2, [pc, #36]	; (8000f94 <prvCheckForValidListAndQueue+0x44>)
 8000f70:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8000f72:	4b0b      	ldr	r3, [pc, #44]	; (8000fa0 <prvCheckForValidListAndQueue+0x50>)
 8000f74:	4a08      	ldr	r2, [pc, #32]	; (8000f98 <prvCheckForValidListAndQueue+0x48>)
 8000f76:	601a      	str	r2, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
 8000f78:	2200      	movs	r2, #0
 8000f7a:	210c      	movs	r1, #12
 8000f7c:	2005      	movs	r0, #5
 8000f7e:	f000 febf 	bl	8001d00 <xQueueGenericCreate>
 8000f82:	4602      	mov	r2, r0
 8000f84:	4b02      	ldr	r3, [pc, #8]	; (8000f90 <prvCheckForValidListAndQueue+0x40>)
 8000f86:	601a      	str	r2, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
 8000f88:	f001 faf4 	bl	8002574 <vPortExitCritical>
}
 8000f8c:	bf00      	nop
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	2000007c 	.word	0x2000007c
 8000f94:	2000004c 	.word	0x2000004c
 8000f98:	20000060 	.word	0x20000060
 8000f9c:	20000074 	.word	0x20000074
 8000fa0:	20000078 	.word	0x20000078

08000fa4 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b08a      	sub	sp, #40	; 0x28
 8000fa8:	af02      	add	r7, sp, #8
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	603b      	str	r3, [r7, #0]
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	80fb      	strh	r3, [r7, #6]
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d104      	bne.n	8000fc4 <xTaskGenericCreate+0x20>
 8000fba:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000fbe:	f380 8811 	msr	BASEPRI, r0
 8000fc2:	e7fe      	b.n	8000fc2 <xTaskGenericCreate+0x1e>
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );
 8000fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fc6:	2b04      	cmp	r3, #4
 8000fc8:	d904      	bls.n	8000fd4 <xTaskGenericCreate+0x30>
 8000fca:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000fce:	f380 8811 	msr	BASEPRI, r0
 8000fd2:	e7fe      	b.n	8000fd2 <xTaskGenericCreate+0x2e>

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 8000fd4:	88fb      	ldrh	r3, [r7, #6]
 8000fd6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f000 fd31 	bl	8001a40 <prvAllocateTCBAndStack>
 8000fde:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d07a      	beq.n	80010dc <xTaskGenericCreate+0x138>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
 8000fe6:	69bb      	ldr	r3, [r7, #24]
 8000fe8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fea:	88fb      	ldrh	r3, [r7, #6]
 8000fec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000ff0:	3b01      	subs	r3, #1
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	4413      	add	r3, r2
 8000ff6:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	f023 0307 	bic.w	r3, r3, #7
 8000ffe:	617b      	str	r3, [r7, #20]

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( unsigned long ) pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	f003 0307 	and.w	r3, r3, #7
 8001006:	2b00      	cmp	r3, #0
 8001008:	d004      	beq.n	8001014 <xTaskGenericCreate+0x70>
 800100a:	f04f 0050 	mov.w	r0, #80	; 0x50
 800100e:	f380 8811 	msr	BASEPRI, r0
 8001012:	e7fe      	b.n	8001012 <xTaskGenericCreate+0x6e>
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
 8001014:	88fb      	ldrh	r3, [r7, #6]
 8001016:	9300      	str	r3, [sp, #0]
 8001018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800101a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800101c:	68b9      	ldr	r1, [r7, #8]
 800101e:	69b8      	ldr	r0, [r7, #24]
 8001020:	f000 fc28 	bl	8001874 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001024:	683a      	ldr	r2, [r7, #0]
 8001026:	68f9      	ldr	r1, [r7, #12]
 8001028:	6978      	ldr	r0, [r7, #20]
 800102a:	f001 fa11 	bl	8002450 <pxPortInitialiseStack>
 800102e:	4602      	mov	r2, r0
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	601a      	str	r2, [r3, #0]
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
 8001034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001036:	2b00      	cmp	r3, #0
 8001038:	d002      	beq.n	8001040 <xTaskGenericCreate+0x9c>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
 800103a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	601a      	str	r2, [r3, #0]
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
 8001040:	f001 fa86 	bl	8002550 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
 8001044:	4b31      	ldr	r3, [pc, #196]	; (800110c <xTaskGenericCreate+0x168>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	3301      	adds	r3, #1
 800104a:	4a30      	ldr	r2, [pc, #192]	; (800110c <xTaskGenericCreate+0x168>)
 800104c:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
 800104e:	4b30      	ldr	r3, [pc, #192]	; (8001110 <xTaskGenericCreate+0x16c>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d109      	bne.n	800106a <xTaskGenericCreate+0xc6>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
 8001056:	4a2e      	ldr	r2, [pc, #184]	; (8001110 <xTaskGenericCreate+0x16c>)
 8001058:	69bb      	ldr	r3, [r7, #24]
 800105a:	6013      	str	r3, [r2, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
 800105c:	4b2b      	ldr	r3, [pc, #172]	; (800110c <xTaskGenericCreate+0x168>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2b01      	cmp	r3, #1
 8001062:	d10f      	bne.n	8001084 <xTaskGenericCreate+0xe0>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
 8001064:	f000 fc3c 	bl	80018e0 <prvInitialiseTaskLists>
 8001068:	e00c      	b.n	8001084 <xTaskGenericCreate+0xe0>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
 800106a:	4b2a      	ldr	r3, [pc, #168]	; (8001114 <xTaskGenericCreate+0x170>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d108      	bne.n	8001084 <xTaskGenericCreate+0xe0>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
 8001072:	4b27      	ldr	r3, [pc, #156]	; (8001110 <xTaskGenericCreate+0x16c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800107a:	429a      	cmp	r2, r3
 800107c:	d802      	bhi.n	8001084 <xTaskGenericCreate+0xe0>
					{
						pxCurrentTCB = pxNewTCB;
 800107e:	4a24      	ldr	r2, [pc, #144]	; (8001110 <xTaskGenericCreate+0x16c>)
 8001080:	69bb      	ldr	r3, [r7, #24]
 8001082:	6013      	str	r3, [r2, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001088:	4b23      	ldr	r3, [pc, #140]	; (8001118 <xTaskGenericCreate+0x174>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	429a      	cmp	r2, r3
 800108e:	d903      	bls.n	8001098 <xTaskGenericCreate+0xf4>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001094:	4a20      	ldr	r2, [pc, #128]	; (8001118 <xTaskGenericCreate+0x174>)
 8001096:	6013      	str	r3, [r2, #0]
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
 8001098:	4b20      	ldr	r3, [pc, #128]	; (800111c <xTaskGenericCreate+0x178>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	3301      	adds	r3, #1
 800109e:	4a1f      	ldr	r2, [pc, #124]	; (800111c <xTaskGenericCreate+0x178>)
 80010a0:	6013      	str	r3, [r2, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010a6:	4b1e      	ldr	r3, [pc, #120]	; (8001120 <xTaskGenericCreate+0x17c>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	429a      	cmp	r2, r3
 80010ac:	d903      	bls.n	80010b6 <xTaskGenericCreate+0x112>
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010b2:	4a1b      	ldr	r2, [pc, #108]	; (8001120 <xTaskGenericCreate+0x17c>)
 80010b4:	6013      	str	r3, [r2, #0]
 80010b6:	69bb      	ldr	r3, [r7, #24]
 80010b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010ba:	4613      	mov	r3, r2
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	4413      	add	r3, r2
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	4a18      	ldr	r2, [pc, #96]	; (8001124 <xTaskGenericCreate+0x180>)
 80010c4:	441a      	add	r2, r3
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	3304      	adds	r3, #4
 80010ca:	4619      	mov	r1, r3
 80010cc:	4610      	mov	r0, r2
 80010ce:	f001 faf7 	bl	80026c0 <vListInsertEnd>

			xReturn = pdPASS;
 80010d2:	2301      	movs	r3, #1
 80010d4:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
 80010d6:	f001 fa4d 	bl	8002574 <vPortExitCritical>
 80010da:	e002      	b.n	80010e2 <xTaskGenericCreate+0x13e>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80010dc:	f04f 33ff 	mov.w	r3, #4294967295
 80010e0:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d10b      	bne.n	8001100 <xTaskGenericCreate+0x15c>
	{
		if( xSchedulerRunning != pdFALSE )
 80010e8:	4b0a      	ldr	r3, [pc, #40]	; (8001114 <xTaskGenericCreate+0x170>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d007      	beq.n	8001100 <xTaskGenericCreate+0x15c>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 80010f0:	4b07      	ldr	r3, [pc, #28]	; (8001110 <xTaskGenericCreate+0x16c>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d201      	bcs.n	8001100 <xTaskGenericCreate+0x15c>
			{
				portYIELD_WITHIN_API();
 80010fc:	f001 fa1a 	bl	8002534 <vPortYieldFromISR>
			}
		}
	}

	return xReturn;
 8001100:	69fb      	ldr	r3, [r7, #28]
}
 8001102:	4618      	mov	r0, r3
 8001104:	3720      	adds	r7, #32
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	2000015c 	.word	0x2000015c
 8001110:	20000084 	.word	0x20000084
 8001114:	2000016c 	.word	0x2000016c
 8001118:	20000164 	.word	0x20000164
 800111c:	20000180 	.word	0x20000180
 8001120:	20000168 	.word	0x20000168
 8001124:	20000088 	.word	0x20000088

08001128 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
 8001132:	2300      	movs	r3, #0
 8001134:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d104      	bne.n	8001146 <vTaskDelayUntil+0x1e>
 800113c:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001140:	f380 8811 	msr	BASEPRI, r0
 8001144:	e7fe      	b.n	8001144 <vTaskDelayUntil+0x1c>
		configASSERT( ( xTimeIncrement > 0U ) );
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d104      	bne.n	8001156 <vTaskDelayUntil+0x2e>
 800114c:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001150:	f380 8811 	msr	BASEPRI, r0
 8001154:	e7fe      	b.n	8001154 <vTaskDelayUntil+0x2c>

		vTaskSuspendAll();
 8001156:	f000 f87f 	bl	8001258 <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	4413      	add	r3, r2
 8001162:	613b      	str	r3, [r7, #16]

			if( xTickCount < *pxPreviousWakeTime )
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	4b1b      	ldr	r3, [pc, #108]	; (80011d8 <vTaskDelayUntil+0xb0>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	429a      	cmp	r2, r3
 800116e:	d90c      	bls.n	800118a <vTaskDelayUntil+0x62>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	429a      	cmp	r2, r3
 8001178:	d913      	bls.n	80011a2 <vTaskDelayUntil+0x7a>
 800117a:	4b17      	ldr	r3, [pc, #92]	; (80011d8 <vTaskDelayUntil+0xb0>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	429a      	cmp	r2, r3
 8001182:	d90e      	bls.n	80011a2 <vTaskDelayUntil+0x7a>
				{
					xShouldDelay = pdTRUE;
 8001184:	2301      	movs	r3, #1
 8001186:	617b      	str	r3, [r7, #20]
 8001188:	e00b      	b.n	80011a2 <vTaskDelayUntil+0x7a>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	429a      	cmp	r2, r3
 8001192:	d804      	bhi.n	800119e <vTaskDelayUntil+0x76>
 8001194:	4b10      	ldr	r3, [pc, #64]	; (80011d8 <vTaskDelayUntil+0xb0>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	429a      	cmp	r2, r3
 800119c:	d901      	bls.n	80011a2 <vTaskDelayUntil+0x7a>
				{
					xShouldDelay = pdTRUE;
 800119e:	2301      	movs	r3, #1
 80011a0:	617b      	str	r3, [r7, #20]
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d008      	beq.n	80011c0 <vTaskDelayUntil+0x98>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 80011ae:	4b0b      	ldr	r3, [pc, #44]	; (80011dc <vTaskDelayUntil+0xb4>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	3304      	adds	r3, #4
 80011b4:	4618      	mov	r0, r3
 80011b6:	f001 fae5 	bl	8002784 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 80011ba:	6938      	ldr	r0, [r7, #16]
 80011bc:	f000 fc0a 	bl	80019d4 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80011c0:	f000 f858 	bl	8001274 <xTaskResumeAll>
 80011c4:	60f8      	str	r0, [r7, #12]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d101      	bne.n	80011d0 <vTaskDelayUntil+0xa8>
		{
			portYIELD_WITHIN_API();
 80011cc:	f001 f9b2 	bl	8002534 <vPortYieldFromISR>
		}
	}
 80011d0:	bf00      	nop
 80011d2:	3718      	adds	r7, #24
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20000160 	.word	0x20000160
 80011dc:	20000084 	.word	0x20000084

080011e0 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
 80011e6:	2300      	movs	r3, #0
 80011e8:	9303      	str	r3, [sp, #12]
 80011ea:	2300      	movs	r3, #0
 80011ec:	9302      	str	r3, [sp, #8]
 80011ee:	2300      	movs	r3, #0
 80011f0:	9301      	str	r3, [sp, #4]
 80011f2:	2300      	movs	r3, #0
 80011f4:	9300      	str	r3, [sp, #0]
 80011f6:	2300      	movs	r3, #0
 80011f8:	2246      	movs	r2, #70	; 0x46
 80011fa:	4913      	ldr	r1, [pc, #76]	; (8001248 <vTaskStartScheduler+0x68>)
 80011fc:	4813      	ldr	r0, [pc, #76]	; (800124c <vTaskStartScheduler+0x6c>)
 80011fe:	f7ff fed1 	bl	8000fa4 <xTaskGenericCreate>
 8001202:	6078      	str	r0, [r7, #4]
	}
	#endif

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2b01      	cmp	r3, #1
 8001208:	d102      	bne.n	8001210 <vTaskStartScheduler+0x30>
		{
			xReturn = xTimerCreateTimerTask();
 800120a:	f7ff fc1d 	bl	8000a48 <xTimerCreateTimerTask>
 800120e:	6078      	str	r0, [r7, #4]
		}
	}
	#endif

	if( xReturn == pdPASS )
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2b01      	cmp	r3, #1
 8001214:	d10b      	bne.n	800122e <vTaskStartScheduler+0x4e>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
 8001216:	f04f 0050 	mov.w	r0, #80	; 0x50
 800121a:	f380 8811 	msr	BASEPRI, r0

		xSchedulerRunning = pdTRUE;
 800121e:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <vTaskStartScheduler+0x70>)
 8001220:	2201      	movs	r2, #1
 8001222:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
 8001224:	4b0b      	ldr	r3, [pc, #44]	; (8001254 <vTaskStartScheduler+0x74>)
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800122a:	f001 f95d 	bl	80024e8 <xPortStartScheduler>
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d104      	bne.n	800123e <vTaskStartScheduler+0x5e>
 8001234:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001238:	f380 8811 	msr	BASEPRI, r0
 800123c:	e7fe      	b.n	800123c <vTaskStartScheduler+0x5c>
}
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	080028c8 	.word	0x080028c8
 800124c:	08001851 	.word	0x08001851
 8001250:	2000016c 	.word	0x2000016c
 8001254:	20000160 	.word	0x20000160

08001258 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
 800125c:	4b04      	ldr	r3, [pc, #16]	; (8001270 <vTaskSuspendAll+0x18>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	3301      	adds	r3, #1
 8001262:	4a03      	ldr	r2, [pc, #12]	; (8001270 <vTaskSuspendAll+0x18>)
 8001264:	6013      	str	r3, [r2, #0]
}
 8001266:	bf00      	nop
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	20000170 	.word	0x20000170

08001274 <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
 8001274:	b590      	push	{r4, r7, lr}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
 800127a:	2300      	movs	r3, #0
 800127c:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800127e:	4b37      	ldr	r3, [pc, #220]	; (800135c <xTaskResumeAll+0xe8>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d104      	bne.n	8001290 <xTaskResumeAll+0x1c>
 8001286:	f04f 0050 	mov.w	r0, #80	; 0x50
 800128a:	f380 8811 	msr	BASEPRI, r0
 800128e:	e7fe      	b.n	800128e <xTaskResumeAll+0x1a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001290:	f001 f95e 	bl	8002550 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001294:	4b31      	ldr	r3, [pc, #196]	; (800135c <xTaskResumeAll+0xe8>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	3b01      	subs	r3, #1
 800129a:	4a30      	ldr	r2, [pc, #192]	; (800135c <xTaskResumeAll+0xe8>)
 800129c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 800129e:	4b2f      	ldr	r3, [pc, #188]	; (800135c <xTaskResumeAll+0xe8>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d152      	bne.n	800134c <xTaskResumeAll+0xd8>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
 80012a6:	4b2e      	ldr	r3, [pc, #184]	; (8001360 <xTaskResumeAll+0xec>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d04e      	beq.n	800134c <xTaskResumeAll+0xd8>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
 80012ae:	2300      	movs	r3, #0
 80012b0:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
 80012b2:	e027      	b.n	8001304 <xTaskResumeAll+0x90>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
 80012b4:	4b2b      	ldr	r3, [pc, #172]	; (8001364 <xTaskResumeAll+0xf0>)
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	68dc      	ldr	r4, [r3, #12]
					vListRemove( &( pxTCB->xEventListItem ) );
 80012ba:	f104 0318 	add.w	r3, r4, #24
 80012be:	4618      	mov	r0, r3
 80012c0:	f001 fa60 	bl	8002784 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
 80012c4:	1d23      	adds	r3, r4, #4
 80012c6:	4618      	mov	r0, r3
 80012c8:	f001 fa5c 	bl	8002784 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
 80012cc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80012ce:	4b26      	ldr	r3, [pc, #152]	; (8001368 <xTaskResumeAll+0xf4>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	429a      	cmp	r2, r3
 80012d4:	d902      	bls.n	80012dc <xTaskResumeAll+0x68>
 80012d6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80012d8:	4a23      	ldr	r2, [pc, #140]	; (8001368 <xTaskResumeAll+0xf4>)
 80012da:	6013      	str	r3, [r2, #0]
 80012dc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80012de:	4613      	mov	r3, r2
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	4413      	add	r3, r2
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	4a21      	ldr	r2, [pc, #132]	; (800136c <xTaskResumeAll+0xf8>)
 80012e8:	4413      	add	r3, r2
 80012ea:	1d22      	adds	r2, r4, #4
 80012ec:	4611      	mov	r1, r2
 80012ee:	4618      	mov	r0, r3
 80012f0:	f001 f9e6 	bl	80026c0 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80012f4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80012f6:	4b1e      	ldr	r3, [pc, #120]	; (8001370 <xTaskResumeAll+0xfc>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d301      	bcc.n	8001304 <xTaskResumeAll+0x90>
					{
						xYieldRequired = pdTRUE;
 8001300:	2301      	movs	r3, #1
 8001302:	603b      	str	r3, [r7, #0]
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
 8001304:	4b17      	ldr	r3, [pc, #92]	; (8001364 <xTaskResumeAll+0xf0>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d1d3      	bne.n	80012b4 <xTaskResumeAll+0x40>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 800130c:	4b19      	ldr	r3, [pc, #100]	; (8001374 <xTaskResumeAll+0x100>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d00d      	beq.n	8001330 <xTaskResumeAll+0xbc>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 8001314:	e006      	b.n	8001324 <xTaskResumeAll+0xb0>
					{
						vTaskIncrementTick();
 8001316:	f000 f843 	bl	80013a0 <vTaskIncrementTick>
						--uxMissedTicks;
 800131a:	4b16      	ldr	r3, [pc, #88]	; (8001374 <xTaskResumeAll+0x100>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	3b01      	subs	r3, #1
 8001320:	4a14      	ldr	r2, [pc, #80]	; (8001374 <xTaskResumeAll+0x100>)
 8001322:	6013      	str	r3, [r2, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 8001324:	4b13      	ldr	r3, [pc, #76]	; (8001374 <xTaskResumeAll+0x100>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d1f4      	bne.n	8001316 <xTaskResumeAll+0xa2>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
 800132c:	2301      	movs	r3, #1
 800132e:	603b      	str	r3, [r7, #0]
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d003      	beq.n	800133e <xTaskResumeAll+0xca>
 8001336:	4b10      	ldr	r3, [pc, #64]	; (8001378 <xTaskResumeAll+0x104>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d106      	bne.n	800134c <xTaskResumeAll+0xd8>
				{
					xAlreadyYielded = pdTRUE;
 800133e:	2301      	movs	r3, #1
 8001340:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
 8001342:	4b0d      	ldr	r3, [pc, #52]	; (8001378 <xTaskResumeAll+0x104>)
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
 8001348:	f001 f8f4 	bl	8002534 <vPortYieldFromISR>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
 800134c:	f001 f912 	bl	8002574 <vPortExitCritical>

	return xAlreadyYielded;
 8001350:	687b      	ldr	r3, [r7, #4]
}
 8001352:	4618      	mov	r0, r3
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	bd90      	pop	{r4, r7, pc}
 800135a:	bf00      	nop
 800135c:	20000170 	.word	0x20000170
 8001360:	2000015c 	.word	0x2000015c
 8001364:	2000011c 	.word	0x2000011c
 8001368:	20000168 	.word	0x20000168
 800136c:	20000088 	.word	0x20000088
 8001370:	20000084 	.word	0x20000084
 8001374:	20000174 	.word	0x20000174
 8001378:	20000178 	.word	0x20000178

0800137c <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
 8001382:	f001 f8e5 	bl	8002550 <vPortEnterCritical>
	{
		xTicks = xTickCount;
 8001386:	4b05      	ldr	r3, [pc, #20]	; (800139c <xTaskGetTickCount+0x20>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
 800138c:	f001 f8f2 	bl	8002574 <vPortExitCritical>

	return xTicks;
 8001390:	687b      	ldr	r3, [r7, #4]
}
 8001392:	4618      	mov	r0, r3
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20000160 	.word	0x20000160

080013a0 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 80013a6:	4b49      	ldr	r3, [pc, #292]	; (80014cc <vTaskIncrementTick+0x12c>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d17c      	bne.n	80014a8 <vTaskIncrementTick+0x108>
	{
		++xTickCount;
 80013ae:	4b48      	ldr	r3, [pc, #288]	; (80014d0 <vTaskIncrementTick+0x130>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	3301      	adds	r3, #1
 80013b4:	4a46      	ldr	r2, [pc, #280]	; (80014d0 <vTaskIncrementTick+0x130>)
 80013b6:	6013      	str	r3, [r2, #0]
		if( xTickCount == ( portTickType ) 0U )
 80013b8:	4b45      	ldr	r3, [pc, #276]	; (80014d0 <vTaskIncrementTick+0x130>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d12b      	bne.n	8001418 <vTaskIncrementTick+0x78>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
 80013c0:	4b44      	ldr	r3, [pc, #272]	; (80014d4 <vTaskIncrementTick+0x134>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d004      	beq.n	80013d4 <vTaskIncrementTick+0x34>
 80013ca:	f04f 0050 	mov.w	r0, #80	; 0x50
 80013ce:	f380 8811 	msr	BASEPRI, r0
 80013d2:	e7fe      	b.n	80013d2 <vTaskIncrementTick+0x32>
			
			pxTemp = pxDelayedTaskList;
 80013d4:	4b3f      	ldr	r3, [pc, #252]	; (80014d4 <vTaskIncrementTick+0x134>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
 80013da:	4b3f      	ldr	r3, [pc, #252]	; (80014d8 <vTaskIncrementTick+0x138>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a3d      	ldr	r2, [pc, #244]	; (80014d4 <vTaskIncrementTick+0x134>)
 80013e0:	6013      	str	r3, [r2, #0]
			pxOverflowDelayedTaskList = pxTemp;
 80013e2:	4a3d      	ldr	r2, [pc, #244]	; (80014d8 <vTaskIncrementTick+0x138>)
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	6013      	str	r3, [r2, #0]
			xNumOfOverflows++;
 80013e8:	4b3c      	ldr	r3, [pc, #240]	; (80014dc <vTaskIncrementTick+0x13c>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	3301      	adds	r3, #1
 80013ee:	4a3b      	ldr	r2, [pc, #236]	; (80014dc <vTaskIncrementTick+0x13c>)
 80013f0:	6013      	str	r3, [r2, #0]
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80013f2:	4b38      	ldr	r3, [pc, #224]	; (80014d4 <vTaskIncrementTick+0x134>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d104      	bne.n	8001406 <vTaskIncrementTick+0x66>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
 80013fc:	4b38      	ldr	r3, [pc, #224]	; (80014e0 <vTaskIncrementTick+0x140>)
 80013fe:	f04f 32ff 	mov.w	r2, #4294967295
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	e008      	b.n	8001418 <vTaskIncrementTick+0x78>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001406:	4b33      	ldr	r3, [pc, #204]	; (80014d4 <vTaskIncrementTick+0x134>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	68db      	ldr	r3, [r3, #12]
 800140e:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	4a32      	ldr	r2, [pc, #200]	; (80014e0 <vTaskIncrementTick+0x140>)
 8001416:	6013      	str	r3, [r2, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
 8001418:	4b2d      	ldr	r3, [pc, #180]	; (80014d0 <vTaskIncrementTick+0x130>)
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	4b30      	ldr	r3, [pc, #192]	; (80014e0 <vTaskIncrementTick+0x140>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	429a      	cmp	r2, r3
 8001422:	d348      	bcc.n	80014b6 <vTaskIncrementTick+0x116>
 8001424:	4b2b      	ldr	r3, [pc, #172]	; (80014d4 <vTaskIncrementTick+0x134>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d104      	bne.n	8001438 <vTaskIncrementTick+0x98>
 800142e:	4b2c      	ldr	r3, [pc, #176]	; (80014e0 <vTaskIncrementTick+0x140>)
 8001430:	f04f 32ff 	mov.w	r2, #4294967295
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	e03e      	b.n	80014b6 <vTaskIncrementTick+0x116>
 8001438:	4b26      	ldr	r3, [pc, #152]	; (80014d4 <vTaskIncrementTick+0x134>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	68db      	ldr	r3, [r3, #12]
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	60bb      	str	r3, [r7, #8]
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	607b      	str	r3, [r7, #4]
 8001448:	4b21      	ldr	r3, [pc, #132]	; (80014d0 <vTaskIncrementTick+0x130>)
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	429a      	cmp	r2, r3
 8001450:	d203      	bcs.n	800145a <vTaskIncrementTick+0xba>
 8001452:	4a23      	ldr	r2, [pc, #140]	; (80014e0 <vTaskIncrementTick+0x140>)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6013      	str	r3, [r2, #0]
 8001458:	e02d      	b.n	80014b6 <vTaskIncrementTick+0x116>
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	3304      	adds	r3, #4
 800145e:	4618      	mov	r0, r3
 8001460:	f001 f990 	bl	8002784 <vListRemove>
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001468:	2b00      	cmp	r3, #0
 800146a:	d004      	beq.n	8001476 <vTaskIncrementTick+0xd6>
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	3318      	adds	r3, #24
 8001470:	4618      	mov	r0, r3
 8001472:	f001 f987 	bl	8002784 <vListRemove>
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800147a:	4b1a      	ldr	r3, [pc, #104]	; (80014e4 <vTaskIncrementTick+0x144>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	429a      	cmp	r2, r3
 8001480:	d903      	bls.n	800148a <vTaskIncrementTick+0xea>
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001486:	4a17      	ldr	r2, [pc, #92]	; (80014e4 <vTaskIncrementTick+0x144>)
 8001488:	6013      	str	r3, [r2, #0]
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800148e:	4613      	mov	r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	4413      	add	r3, r2
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	4a14      	ldr	r2, [pc, #80]	; (80014e8 <vTaskIncrementTick+0x148>)
 8001498:	441a      	add	r2, r3
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	3304      	adds	r3, #4
 800149e:	4619      	mov	r1, r3
 80014a0:	4610      	mov	r0, r2
 80014a2:	f001 f90d 	bl	80026c0 <vListInsertEnd>
 80014a6:	e7bd      	b.n	8001424 <vTaskIncrementTick+0x84>
	}
	else
	{
		++uxMissedTicks;
 80014a8:	4b10      	ldr	r3, [pc, #64]	; (80014ec <vTaskIncrementTick+0x14c>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	3301      	adds	r3, #1
 80014ae:	4a0f      	ldr	r2, [pc, #60]	; (80014ec <vTaskIncrementTick+0x14c>)
 80014b0:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 80014b2:	f7ff f88b 	bl	80005cc <vApplicationTickHook>

	#if ( configUSE_TICK_HOOK == 1 )
	{
		/* Guard against the tick hook being called when the missed tick
		count is being unwound (when the scheduler is being unlocked. */
		if( uxMissedTicks == ( unsigned portBASE_TYPE ) 0U )
 80014b6:	4b0d      	ldr	r3, [pc, #52]	; (80014ec <vTaskIncrementTick+0x14c>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d101      	bne.n	80014c2 <vTaskIncrementTick+0x122>
		{
			vApplicationTickHook();
 80014be:	f7ff f885 	bl	80005cc <vApplicationTickHook>
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
 80014c2:	bf00      	nop
 80014c4:	3710      	adds	r7, #16
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20000170 	.word	0x20000170
 80014d0:	20000160 	.word	0x20000160
 80014d4:	20000114 	.word	0x20000114
 80014d8:	20000118 	.word	0x20000118
 80014dc:	2000017c 	.word	0x2000017c
 80014e0:	20000010 	.word	0x20000010
 80014e4:	20000168 	.word	0x20000168
 80014e8:	20000088 	.word	0x20000088
 80014ec:	20000174 	.word	0x20000174

080014f0 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 80014f6:	4b34      	ldr	r3, [pc, #208]	; (80015c8 <vTaskSwitchContext+0xd8>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d003      	beq.n	8001506 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
 80014fe:	4b33      	ldr	r3, [pc, #204]	; (80015cc <vTaskSwitchContext+0xdc>)
 8001500:	2201      	movs	r2, #1
 8001502:	601a      	str	r2, [r3, #0]
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
	
		traceTASK_SWITCHED_IN();
	}
}
 8001504:	e05c      	b.n	80015c0 <vTaskSwitchContext+0xd0>
				pxCurrentTCB->ulRunTimeCounter += ( ulTempCounter - ulTaskSwitchedInTime );
				ulTaskSwitchedInTime = ulTempCounter;
		}
		#endif
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 8001506:	4b32      	ldr	r3, [pc, #200]	; (80015d0 <vTaskSwitchContext+0xe0>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	4b30      	ldr	r3, [pc, #192]	; (80015d0 <vTaskSwitchContext+0xe0>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	429a      	cmp	r2, r3
 8001514:	d808      	bhi.n	8001528 <vTaskSwitchContext+0x38>
 8001516:	4b2e      	ldr	r3, [pc, #184]	; (80015d0 <vTaskSwitchContext+0xe0>)
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	4b2d      	ldr	r3, [pc, #180]	; (80015d0 <vTaskSwitchContext+0xe0>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	3334      	adds	r3, #52	; 0x34
 8001520:	4619      	mov	r1, r3
 8001522:	4610      	mov	r0, r2
 8001524:	f7ff f878 	bl	8000618 <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 8001528:	4b29      	ldr	r3, [pc, #164]	; (80015d0 <vTaskSwitchContext+0xe0>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	2214      	movs	r2, #20
 8001530:	4928      	ldr	r1, [pc, #160]	; (80015d4 <vTaskSwitchContext+0xe4>)
 8001532:	4618      	mov	r0, r3
 8001534:	f001 f974 	bl	8002820 <memcmp>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d017      	beq.n	800156e <vTaskSwitchContext+0x7e>
 800153e:	4b24      	ldr	r3, [pc, #144]	; (80015d0 <vTaskSwitchContext+0xe0>)
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	4b23      	ldr	r3, [pc, #140]	; (80015d0 <vTaskSwitchContext+0xe0>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	3334      	adds	r3, #52	; 0x34
 8001548:	4619      	mov	r1, r3
 800154a:	4610      	mov	r0, r2
 800154c:	f7ff f864 	bl	8000618 <vApplicationStackOverflowHook>
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 8001550:	e00d      	b.n	800156e <vTaskSwitchContext+0x7e>
		{
			configASSERT( uxTopReadyPriority );
 8001552:	4b21      	ldr	r3, [pc, #132]	; (80015d8 <vTaskSwitchContext+0xe8>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d104      	bne.n	8001564 <vTaskSwitchContext+0x74>
 800155a:	f04f 0050 	mov.w	r0, #80	; 0x50
 800155e:	f380 8811 	msr	BASEPRI, r0
 8001562:	e7fe      	b.n	8001562 <vTaskSwitchContext+0x72>
			--uxTopReadyPriority;
 8001564:	4b1c      	ldr	r3, [pc, #112]	; (80015d8 <vTaskSwitchContext+0xe8>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	3b01      	subs	r3, #1
 800156a:	4a1b      	ldr	r2, [pc, #108]	; (80015d8 <vTaskSwitchContext+0xe8>)
 800156c:	6013      	str	r3, [r2, #0]
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 800156e:	4b1a      	ldr	r3, [pc, #104]	; (80015d8 <vTaskSwitchContext+0xe8>)
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	491a      	ldr	r1, [pc, #104]	; (80015dc <vTaskSwitchContext+0xec>)
 8001574:	4613      	mov	r3, r2
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	4413      	add	r3, r2
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	440b      	add	r3, r1
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d0e6      	beq.n	8001552 <vTaskSwitchContext+0x62>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
 8001584:	4b14      	ldr	r3, [pc, #80]	; (80015d8 <vTaskSwitchContext+0xe8>)
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	4613      	mov	r3, r2
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	4413      	add	r3, r2
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	4a12      	ldr	r2, [pc, #72]	; (80015dc <vTaskSwitchContext+0xec>)
 8001592:	4413      	add	r3, r2
 8001594:	607b      	str	r3, [r7, #4]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	685a      	ldr	r2, [r3, #4]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	605a      	str	r2, [r3, #4]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	685a      	ldr	r2, [r3, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	3308      	adds	r3, #8
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d104      	bne.n	80015b6 <vTaskSwitchContext+0xc6>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	685a      	ldr	r2, [r3, #4]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	605a      	str	r2, [r3, #4]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	4a04      	ldr	r2, [pc, #16]	; (80015d0 <vTaskSwitchContext+0xe0>)
 80015be:	6013      	str	r3, [r2, #0]
	
		traceTASK_SWITCHED_IN();
	}
}
 80015c0:	bf00      	nop
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	20000170 	.word	0x20000170
 80015cc:	20000178 	.word	0x20000178
 80015d0:	20000084 	.word	0x20000084
 80015d4:	080028d0 	.word	0x080028d0
 80015d8:	20000168 	.word	0x20000168
 80015dc:	20000088 	.word	0x20000088

080015e0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	configASSERT( pxEventList );
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d104      	bne.n	80015fa <vTaskPlaceOnEventList+0x1a>
 80015f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80015f4:	f380 8811 	msr	BASEPRI, r0
 80015f8:	e7fe      	b.n	80015f8 <vTaskPlaceOnEventList+0x18>
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
 80015fa:	4b12      	ldr	r3, [pc, #72]	; (8001644 <vTaskPlaceOnEventList+0x64>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	3318      	adds	r3, #24
 8001600:	4619      	mov	r1, r3
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f001 f884 	bl	8002710 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 8001608:	4b0e      	ldr	r3, [pc, #56]	; (8001644 <vTaskPlaceOnEventList+0x64>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	3304      	adds	r3, #4
 800160e:	4618      	mov	r0, r3
 8001610:	f001 f8b8 	bl	8002784 <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800161a:	d107      	bne.n	800162c <vTaskPlaceOnEventList+0x4c>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 800161c:	4b09      	ldr	r3, [pc, #36]	; (8001644 <vTaskPlaceOnEventList+0x64>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	3304      	adds	r3, #4
 8001622:	4619      	mov	r1, r3
 8001624:	4808      	ldr	r0, [pc, #32]	; (8001648 <vTaskPlaceOnEventList+0x68>)
 8001626:	f001 f84b 	bl	80026c0 <vListInsertEnd>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
 800162a:	e007      	b.n	800163c <vTaskPlaceOnEventList+0x5c>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
 800162c:	4b07      	ldr	r3, [pc, #28]	; (800164c <vTaskPlaceOnEventList+0x6c>)
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	4413      	add	r3, r2
 8001634:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 8001636:	68f8      	ldr	r0, [r7, #12]
 8001638:	f000 f9cc 	bl	80019d4 <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
 800163c:	bf00      	nop
 800163e:	3710      	adds	r7, #16
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	20000084 	.word	0x20000084
 8001648:	20000148 	.word	0x20000148
 800164c:	20000160 	.word	0x20000160

08001650 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;

		configASSERT( pxEventList );
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d104      	bne.n	800166a <vTaskPlaceOnEventListRestricted+0x1a>
 8001660:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001664:	f380 8811 	msr	BASEPRI, r0
 8001668:	e7fe      	b.n	8001668 <vTaskPlaceOnEventListRestricted+0x18>
	
		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
 800166a:	4b0c      	ldr	r3, [pc, #48]	; (800169c <vTaskPlaceOnEventListRestricted+0x4c>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	3318      	adds	r3, #24
 8001670:	4619      	mov	r1, r3
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f001 f824 	bl	80026c0 <vListInsertEnd>

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 8001678:	4b08      	ldr	r3, [pc, #32]	; (800169c <vTaskPlaceOnEventListRestricted+0x4c>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	3304      	adds	r3, #4
 800167e:	4618      	mov	r0, r3
 8001680:	f001 f880 	bl	8002784 <vListRemove>

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
 8001684:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <vTaskPlaceOnEventListRestricted+0x50>)
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	4413      	add	r3, r2
 800168c:	60fb      	str	r3, [r7, #12]
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 800168e:	68f8      	ldr	r0, [r7, #12]
 8001690:	f000 f9a0 	bl	80019d4 <prvAddCurrentTaskToDelayedList>
	}
 8001694:	bf00      	nop
 8001696:	3710      	adds	r7, #16
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	20000084 	.word	0x20000084
 80016a0:	20000160 	.word	0x20000160

080016a4 <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	68db      	ldr	r3, [r3, #12]
 80016b2:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d104      	bne.n	80016c4 <xTaskRemoveFromEventList+0x20>
 80016ba:	f04f 0050 	mov.w	r0, #80	; 0x50
 80016be:	f380 8811 	msr	BASEPRI, r0
 80016c2:	e7fe      	b.n	80016c2 <xTaskRemoveFromEventList+0x1e>
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	3318      	adds	r3, #24
 80016c8:	4618      	mov	r0, r3
 80016ca:	f001 f85b 	bl	8002784 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 80016ce:	4b1c      	ldr	r3, [pc, #112]	; (8001740 <xTaskRemoveFromEventList+0x9c>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d11d      	bne.n	8001712 <xTaskRemoveFromEventList+0x6e>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	3304      	adds	r3, #4
 80016da:	4618      	mov	r0, r3
 80016dc:	f001 f852 	bl	8002784 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016e4:	4b17      	ldr	r3, [pc, #92]	; (8001744 <xTaskRemoveFromEventList+0xa0>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d903      	bls.n	80016f4 <xTaskRemoveFromEventList+0x50>
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f0:	4a14      	ldr	r2, [pc, #80]	; (8001744 <xTaskRemoveFromEventList+0xa0>)
 80016f2:	6013      	str	r3, [r2, #0]
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016f8:	4613      	mov	r3, r2
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	4413      	add	r3, r2
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	4a11      	ldr	r2, [pc, #68]	; (8001748 <xTaskRemoveFromEventList+0xa4>)
 8001702:	441a      	add	r2, r3
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	3304      	adds	r3, #4
 8001708:	4619      	mov	r1, r3
 800170a:	4610      	mov	r0, r2
 800170c:	f000 ffd8 	bl	80026c0 <vListInsertEnd>
 8001710:	e005      	b.n	800171e <xTaskRemoveFromEventList+0x7a>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	3318      	adds	r3, #24
 8001716:	4619      	mov	r1, r3
 8001718:	480c      	ldr	r0, [pc, #48]	; (800174c <xTaskRemoveFromEventList+0xa8>)
 800171a:	f000 ffd1 	bl	80026c0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001722:	4b0b      	ldr	r3, [pc, #44]	; (8001750 <xTaskRemoveFromEventList+0xac>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001728:	429a      	cmp	r2, r3
 800172a:	d302      	bcc.n	8001732 <xTaskRemoveFromEventList+0x8e>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
 800172c:	2301      	movs	r3, #1
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	e001      	b.n	8001736 <xTaskRemoveFromEventList+0x92>
	}
	else
	{
		xReturn = pdFALSE;
 8001732:	2300      	movs	r3, #0
 8001734:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8001736:	68fb      	ldr	r3, [r7, #12]
}
 8001738:	4618      	mov	r0, r3
 800173a:	3710      	adds	r7, #16
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20000170 	.word	0x20000170
 8001744:	20000168 	.word	0x20000168
 8001748:	20000088 	.word	0x20000088
 800174c:	2000011c 	.word	0x2000011c
 8001750:	20000084 	.word	0x20000084

08001754 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d104      	bne.n	800176c <vTaskSetTimeOutState+0x18>
 8001762:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001766:	f380 8811 	msr	BASEPRI, r0
 800176a:	e7fe      	b.n	800176a <vTaskSetTimeOutState+0x16>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800176c:	4b06      	ldr	r3, [pc, #24]	; (8001788 <vTaskSetTimeOutState+0x34>)
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8001774:	4b05      	ldr	r3, [pc, #20]	; (800178c <vTaskSetTimeOutState+0x38>)
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	605a      	str	r2, [r3, #4]
}
 800177c:	bf00      	nop
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	2000017c 	.word	0x2000017c
 800178c:	20000160 	.word	0x20000160

08001790 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d104      	bne.n	80017aa <xTaskCheckForTimeOut+0x1a>
 80017a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80017a4:	f380 8811 	msr	BASEPRI, r0
 80017a8:	e7fe      	b.n	80017a8 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d104      	bne.n	80017ba <xTaskCheckForTimeOut+0x2a>
 80017b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80017b4:	f380 8811 	msr	BASEPRI, r0
 80017b8:	e7fe      	b.n	80017b8 <xTaskCheckForTimeOut+0x28>

	taskENTER_CRITICAL();
 80017ba:	f000 fec9 	bl	8002550 <vPortEnterCritical>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017c6:	d102      	bne.n	80017ce <xTaskCheckForTimeOut+0x3e>
			{
				xReturn = pdFALSE;
 80017c8:	2300      	movs	r3, #0
 80017ca:	60fb      	str	r3, [r7, #12]
 80017cc:	e029      	b.n	8001822 <xTaskCheckForTimeOut+0x92>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	4b17      	ldr	r3, [pc, #92]	; (8001830 <xTaskCheckForTimeOut+0xa0>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d008      	beq.n	80017ec <xTaskCheckForTimeOut+0x5c>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685a      	ldr	r2, [r3, #4]
 80017de:	4b15      	ldr	r3, [pc, #84]	; (8001834 <xTaskCheckForTimeOut+0xa4>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d802      	bhi.n	80017ec <xTaskCheckForTimeOut+0x5c>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
 80017e6:	2301      	movs	r3, #1
 80017e8:	60fb      	str	r3, [r7, #12]
 80017ea:	e01a      	b.n	8001822 <xTaskCheckForTimeOut+0x92>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
 80017ec:	4b11      	ldr	r3, [pc, #68]	; (8001834 <xTaskCheckForTimeOut+0xa4>)
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	1ad2      	subs	r2, r2, r3
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d20f      	bcs.n	800181e <xTaskCheckForTimeOut+0x8e>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
 80017fe:	4b0d      	ldr	r3, [pc, #52]	; (8001834 <xTaskCheckForTimeOut+0xa4>)
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	683a      	ldr	r2, [r7, #0]
 800180a:	6812      	ldr	r2, [r2, #0]
 800180c:	1ad2      	subs	r2, r2, r3
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f7ff ff9e 	bl	8001754 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8001818:	2300      	movs	r3, #0
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	e001      	b.n	8001822 <xTaskCheckForTimeOut+0x92>
		}
		else
		{
			xReturn = pdTRUE;
 800181e:	2301      	movs	r3, #1
 8001820:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001822:	f000 fea7 	bl	8002574 <vPortExitCritical>

	return xReturn;
 8001826:	68fb      	ldr	r3, [r7, #12]
}
 8001828:	4618      	mov	r0, r3
 800182a:	3710      	adds	r7, #16
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	2000017c 	.word	0x2000017c
 8001834:	20000160 	.word	0x20000160

08001838 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
 800183c:	4b03      	ldr	r3, [pc, #12]	; (800184c <vTaskMissedYield+0x14>)
 800183e:	2201      	movs	r2, #1
 8001840:	601a      	str	r2, [r3, #0]
}
 8001842:	bf00      	nop
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	20000178 	.word	0x20000178

08001850 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
 8001858:	f000 f882 	bl	8001960 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 800185c:	4b04      	ldr	r3, [pc, #16]	; (8001870 <prvIdleTask+0x20>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2b01      	cmp	r3, #1
 8001862:	d901      	bls.n	8001868 <prvIdleTask+0x18>
			{
				taskYIELD();
 8001864:	f000 fe66 	bl	8002534 <vPortYieldFromISR>
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8001868:	f7fe fedc 	bl	8000624 <vApplicationIdleHook>
		}
		#endif
	}
 800186c:	e7f4      	b.n	8001858 <prvIdleTask+0x8>
 800186e:	bf00      	nop
 8001870:	20000088 	.word	0x20000088

08001874 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	60f8      	str	r0, [r7, #12]
 800187c:	60b9      	str	r1, [r7, #8]
 800187e:	607a      	str	r2, [r7, #4]
 8001880:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	3334      	adds	r3, #52	; 0x34
 8001886:	220a      	movs	r2, #10
 8001888:	68b9      	ldr	r1, [r7, #8]
 800188a:	4618      	mov	r0, r3
 800188c:	f000 ffea 	bl	8002864 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	2200      	movs	r2, #0
 8001894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2b04      	cmp	r3, #4
 800189c:	d901      	bls.n	80018a2 <prvInitialiseTCBVariables+0x2e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
 800189e:	2304      	movs	r3, #4
 80018a0:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	641a      	str	r2, [r3, #64]	; 0x40
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	3304      	adds	r3, #4
 80018b2:	4618      	mov	r0, r3
 80018b4:	f000 fef6 	bl	80026a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	3318      	adds	r3, #24
 80018bc:	4618      	mov	r0, r3
 80018be:	f000 fef1 	bl	80026a4 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	68fa      	ldr	r2, [r7, #12]
 80018c6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f1c3 0205 	rsb	r2, r3, #5
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	68fa      	ldr	r2, [r7, #12]
 80018d6:	625a      	str	r2, [r3, #36]	; 0x24
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
 80018d8:	bf00      	nop
 80018da:	3710      	adds	r7, #16
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
 80018e6:	2300      	movs	r3, #0
 80018e8:	607b      	str	r3, [r7, #4]
 80018ea:	e00c      	b.n	8001906 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	4613      	mov	r3, r2
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	4413      	add	r3, r2
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	4a12      	ldr	r2, [pc, #72]	; (8001940 <prvInitialiseTaskLists+0x60>)
 80018f8:	4413      	add	r3, r2
 80018fa:	4618      	mov	r0, r3
 80018fc:	f000 feb2 	bl	8002664 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	3301      	adds	r3, #1
 8001904:	607b      	str	r3, [r7, #4]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2b04      	cmp	r3, #4
 800190a:	d9ef      	bls.n	80018ec <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
 800190c:	480d      	ldr	r0, [pc, #52]	; (8001944 <prvInitialiseTaskLists+0x64>)
 800190e:	f000 fea9 	bl	8002664 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
 8001912:	480d      	ldr	r0, [pc, #52]	; (8001948 <prvInitialiseTaskLists+0x68>)
 8001914:	f000 fea6 	bl	8002664 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
 8001918:	480c      	ldr	r0, [pc, #48]	; (800194c <prvInitialiseTaskLists+0x6c>)
 800191a:	f000 fea3 	bl	8002664 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
 800191e:	480c      	ldr	r0, [pc, #48]	; (8001950 <prvInitialiseTaskLists+0x70>)
 8001920:	f000 fea0 	bl	8002664 <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
 8001924:	480b      	ldr	r0, [pc, #44]	; (8001954 <prvInitialiseTaskLists+0x74>)
 8001926:	f000 fe9d 	bl	8002664 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800192a:	4b0b      	ldr	r3, [pc, #44]	; (8001958 <prvInitialiseTaskLists+0x78>)
 800192c:	4a05      	ldr	r2, [pc, #20]	; (8001944 <prvInitialiseTaskLists+0x64>)
 800192e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001930:	4b0a      	ldr	r3, [pc, #40]	; (800195c <prvInitialiseTaskLists+0x7c>)
 8001932:	4a05      	ldr	r2, [pc, #20]	; (8001948 <prvInitialiseTaskLists+0x68>)
 8001934:	601a      	str	r2, [r3, #0]
}
 8001936:	bf00      	nop
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	20000088 	.word	0x20000088
 8001944:	200000ec 	.word	0x200000ec
 8001948:	20000100 	.word	0x20000100
 800194c:	2000011c 	.word	0x2000011c
 8001950:	20000130 	.word	0x20000130
 8001954:	20000148 	.word	0x20000148
 8001958:	20000114 	.word	0x20000114
 800195c:	20000118 	.word	0x20000118

08001960 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 8001966:	4b18      	ldr	r3, [pc, #96]	; (80019c8 <prvCheckTasksWaitingTermination+0x68>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d028      	beq.n	80019c0 <prvCheckTasksWaitingTermination+0x60>
		{
			vTaskSuspendAll();
 800196e:	f7ff fc73 	bl	8001258 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8001972:	4b16      	ldr	r3, [pc, #88]	; (80019cc <prvCheckTasksWaitingTermination+0x6c>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2b00      	cmp	r3, #0
 8001978:	bf0c      	ite	eq
 800197a:	2301      	moveq	r3, #1
 800197c:	2300      	movne	r3, #0
 800197e:	b2db      	uxtb	r3, r3
 8001980:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
 8001982:	f7ff fc77 	bl	8001274 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d119      	bne.n	80019c0 <prvCheckTasksWaitingTermination+0x60>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
 800198c:	f000 fde0 	bl	8002550 <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
 8001990:	4b0e      	ldr	r3, [pc, #56]	; (80019cc <prvCheckTasksWaitingTermination+0x6c>)
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	603b      	str	r3, [r7, #0]
					vListRemove( &( pxTCB->xGenericListItem ) );
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	3304      	adds	r3, #4
 800199c:	4618      	mov	r0, r3
 800199e:	f000 fef1 	bl	8002784 <vListRemove>
					--uxCurrentNumberOfTasks;
 80019a2:	4b0b      	ldr	r3, [pc, #44]	; (80019d0 <prvCheckTasksWaitingTermination+0x70>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	3b01      	subs	r3, #1
 80019a8:	4a09      	ldr	r2, [pc, #36]	; (80019d0 <prvCheckTasksWaitingTermination+0x70>)
 80019aa:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
 80019ac:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <prvCheckTasksWaitingTermination+0x68>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	3b01      	subs	r3, #1
 80019b2:	4a05      	ldr	r2, [pc, #20]	; (80019c8 <prvCheckTasksWaitingTermination+0x68>)
 80019b4:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 80019b6:	f000 fddd 	bl	8002574 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 80019ba:	6838      	ldr	r0, [r7, #0]
 80019bc:	f000 f872 	bl	8001aa4 <prvDeleteTCB>
			}
		}
	}
	#endif
}
 80019c0:	bf00      	nop
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	20000144 	.word	0x20000144
 80019cc:	20000130 	.word	0x20000130
 80019d0:	2000015c 	.word	0x2000015c

080019d4 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 80019dc:	4b13      	ldr	r3, [pc, #76]	; (8001a2c <prvAddCurrentTaskToDelayedList+0x58>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
 80019e4:	4b12      	ldr	r3, [pc, #72]	; (8001a30 <prvAddCurrentTaskToDelayedList+0x5c>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d209      	bcs.n	8001a02 <prvAddCurrentTaskToDelayedList+0x2e>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 80019ee:	4b11      	ldr	r3, [pc, #68]	; (8001a34 <prvAddCurrentTaskToDelayedList+0x60>)
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	4b0e      	ldr	r3, [pc, #56]	; (8001a2c <prvAddCurrentTaskToDelayedList+0x58>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	3304      	adds	r3, #4
 80019f8:	4619      	mov	r1, r3
 80019fa:	4610      	mov	r0, r2
 80019fc:	f000 fe88 	bl	8002710 <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
		{
			xNextTaskUnblockTime = xTimeToWake;
		}
	}
}
 8001a00:	e010      	b.n	8001a24 <prvAddCurrentTaskToDelayedList+0x50>
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 8001a02:	4b0d      	ldr	r3, [pc, #52]	; (8001a38 <prvAddCurrentTaskToDelayedList+0x64>)
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	4b09      	ldr	r3, [pc, #36]	; (8001a2c <prvAddCurrentTaskToDelayedList+0x58>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	3304      	adds	r3, #4
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4610      	mov	r0, r2
 8001a10:	f000 fe7e 	bl	8002710 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
 8001a14:	4b09      	ldr	r3, [pc, #36]	; (8001a3c <prvAddCurrentTaskToDelayedList+0x68>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d202      	bcs.n	8001a24 <prvAddCurrentTaskToDelayedList+0x50>
		{
			xNextTaskUnblockTime = xTimeToWake;
 8001a1e:	4a07      	ldr	r2, [pc, #28]	; (8001a3c <prvAddCurrentTaskToDelayedList+0x68>)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6013      	str	r3, [r2, #0]
		}
	}
}
 8001a24:	bf00      	nop
 8001a26:	3708      	adds	r7, #8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	20000084 	.word	0x20000084
 8001a30:	20000160 	.word	0x20000160
 8001a34:	20000118 	.word	0x20000118
 8001a38:	20000114 	.word	0x20000114
 8001a3c:	20000010 	.word	0x20000010

08001a40 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4603      	mov	r3, r0
 8001a48:	6039      	str	r1, [r7, #0]
 8001a4a:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
 8001a4c:	2044      	movs	r0, #68	; 0x44
 8001a4e:	f000 fcab 	bl	80023a8 <pvPortMalloc>
 8001a52:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d01e      	beq.n	8001a98 <prvAllocateTCBAndStack+0x58>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d106      	bne.n	8001a6e <prvAllocateTCBAndStack+0x2e>
 8001a60:	88fb      	ldrh	r3, [r7, #6]
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	4618      	mov	r0, r3
 8001a66:	f000 fc9f 	bl	80023a8 <pvPortMalloc>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	e000      	b.n	8001a70 <prvAllocateTCBAndStack+0x30>
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	68fa      	ldr	r2, [r7, #12]
 8001a72:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d105      	bne.n	8001a88 <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
 8001a7c:	68f8      	ldr	r0, [r7, #12]
 8001a7e:	f000 fccf 	bl	8002420 <vPortFree>
			pxNewTCB = NULL;
 8001a82:	2300      	movs	r3, #0
 8001a84:	60fb      	str	r3, [r7, #12]
 8001a86:	e007      	b.n	8001a98 <prvAllocateTCBAndStack+0x58>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001a8c:	88fb      	ldrh	r3, [r7, #6]
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	461a      	mov	r2, r3
 8001a92:	21a5      	movs	r1, #165	; 0xa5
 8001a94:	f000 fede 	bl	8002854 <memset>
		}
	}

	return pxNewTCB;
 8001a98:	68fb      	ldr	r3, [r7, #12]
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop

08001aa4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f000 fcb5 	bl	8002420 <vPortFree>
		vPortFree( pxTCB );
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f000 fcb2 	bl	8002420 <vPortFree>
	}
 8001abc:	bf00      	nop
 8001abe:	3708      	adds	r7, #8
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8001aca:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <xTaskGetCurrentTaskHandle+0x1c>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	607b      	str	r3, [r7, #4]

		return xReturn;
 8001ad0:	687b      	ldr	r3, [r7, #4]
	}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	370c      	adds	r7, #12
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	20000084 	.word	0x20000084

08001ae4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
 8001aea:	4b0b      	ldr	r3, [pc, #44]	; (8001b18 <xTaskGetSchedulerState+0x34>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d102      	bne.n	8001af8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8001af2:	2300      	movs	r3, #0
 8001af4:	607b      	str	r3, [r7, #4]
 8001af6:	e008      	b.n	8001b0a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8001af8:	4b08      	ldr	r3, [pc, #32]	; (8001b1c <xTaskGetSchedulerState+0x38>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d102      	bne.n	8001b06 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8001b00:	2301      	movs	r3, #1
 8001b02:	607b      	str	r3, [r7, #4]
 8001b04:	e001      	b.n	8001b0a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8001b06:	2302      	movs	r3, #2
 8001b08:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8001b0a:	687b      	ldr	r3, [r7, #4]
	}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr
 8001b18:	2000016c 	.word	0x2000016c
 8001b1c:	20000170 	.word	0x20000170

08001b20 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	60fb      	str	r3, [r7, #12]

		configASSERT( pxMutexHolder );
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d104      	bne.n	8001b3c <vTaskPriorityInherit+0x1c>
 8001b32:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001b36:	f380 8811 	msr	BASEPRI, r0
 8001b3a:	e7fe      	b.n	8001b3a <vTaskPriorityInherit+0x1a>

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b40:	4b21      	ldr	r3, [pc, #132]	; (8001bc8 <vTaskPriorityInherit+0xa8>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d23a      	bcs.n	8001bc0 <vTaskPriorityInherit+0xa0>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
 8001b4a:	4b1f      	ldr	r3, [pc, #124]	; (8001bc8 <vTaskPriorityInherit+0xa8>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b50:	f1c3 0205 	rsb	r2, r3, #5
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	619a      	str	r2, [r3, #24]

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	6959      	ldr	r1, [r3, #20]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b60:	4613      	mov	r3, r2
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	4413      	add	r3, r2
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	4a18      	ldr	r2, [pc, #96]	; (8001bcc <vTaskPriorityInherit+0xac>)
 8001b6a:	4413      	add	r3, r2
 8001b6c:	4299      	cmp	r1, r3
 8001b6e:	d122      	bne.n	8001bb6 <vTaskPriorityInherit+0x96>
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	3304      	adds	r3, #4
 8001b74:	4618      	mov	r0, r3
 8001b76:	f000 fe05 	bl	8002784 <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8001b7a:	4b13      	ldr	r3, [pc, #76]	; (8001bc8 <vTaskPriorityInherit+0xa8>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	62da      	str	r2, [r3, #44]	; 0x2c
				prvAddTaskToReadyQueue( pxTCB );
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b88:	4b11      	ldr	r3, [pc, #68]	; (8001bd0 <vTaskPriorityInherit+0xb0>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d903      	bls.n	8001b98 <vTaskPriorityInherit+0x78>
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b94:	4a0e      	ldr	r2, [pc, #56]	; (8001bd0 <vTaskPriorityInherit+0xb0>)
 8001b96:	6013      	str	r3, [r2, #0]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	4413      	add	r3, r2
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	4a09      	ldr	r2, [pc, #36]	; (8001bcc <vTaskPriorityInherit+0xac>)
 8001ba6:	441a      	add	r2, r3
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	3304      	adds	r3, #4
 8001bac:	4619      	mov	r1, r3
 8001bae:	4610      	mov	r0, r2
 8001bb0:	f000 fd86 	bl	80026c0 <vListInsertEnd>
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
			}

			traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
		}
	}
 8001bb4:	e004      	b.n	8001bc0 <vTaskPriorityInherit+0xa0>
				prvAddTaskToReadyQueue( pxTCB );
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8001bb6:	4b04      	ldr	r3, [pc, #16]	; (8001bc8 <vTaskPriorityInherit+0xa8>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	62da      	str	r2, [r3, #44]	; 0x2c
			}

			traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
		}
	}
 8001bc0:	bf00      	nop
 8001bc2:	3710      	adds	r7, #16
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	20000084 	.word	0x20000084
 8001bcc:	20000088 	.word	0x20000088
 8001bd0:	20000168 	.word	0x20000168

08001bd4 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d02c      	beq.n	8001c40 <vTaskPriorityDisinherit+0x6c>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d026      	beq.n	8001c40 <vTaskPriorityDisinherit+0x6c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	3304      	adds	r3, #4
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f000 fdc4 	bl	8002784 <vListRemove>

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c08:	f1c3 0205 	rsb	r2, r3, #5
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c14:	4b0c      	ldr	r3, [pc, #48]	; (8001c48 <vTaskPriorityDisinherit+0x74>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d903      	bls.n	8001c24 <vTaskPriorityDisinherit+0x50>
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c20:	4a09      	ldr	r2, [pc, #36]	; (8001c48 <vTaskPriorityDisinherit+0x74>)
 8001c22:	6013      	str	r3, [r2, #0]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c28:	4613      	mov	r3, r2
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	4413      	add	r3, r2
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	4a06      	ldr	r2, [pc, #24]	; (8001c4c <vTaskPriorityDisinherit+0x78>)
 8001c32:	441a      	add	r2, r3
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	3304      	adds	r3, #4
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4610      	mov	r0, r2
 8001c3c:	f000 fd40 	bl	80026c0 <vListInsertEnd>
			}
		}
	}
 8001c40:	bf00      	nop
 8001c42:	3710      	adds	r7, #16
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	20000168 	.word	0x20000168
 8001c4c:	20000088 	.word	0x20000088

08001c50 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]
	configASSERT( pxQueue );
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d104      	bne.n	8001c6a <xQueueGenericReset+0x1a>
 8001c60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001c64:	f380 8811 	msr	BASEPRI, r0
 8001c68:	e7fe      	b.n	8001c68 <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
 8001c6a:	f000 fc71 	bl	8002550 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c76:	6879      	ldr	r1, [r7, #4]
 8001c78:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001c7a:	fb01 f303 	mul.w	r3, r1, r3
 8001c7e:	441a      	add	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	609a      	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	6879      	ldr	r1, [r7, #4]
 8001c9e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001ca0:	fb01 f303 	mul.w	r3, r1, r3
 8001ca4:	441a      	add	r2, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	f04f 32ff 	mov.w	r2, #4294967295
 8001cb0:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8001cb8:	649a      	str	r2, [r3, #72]	; 0x48

		if( xNewQueue == pdFALSE )
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d10e      	bne.n	8001cde <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then 
			the tasks will remain blocked as after this function exits the queue 
			will still be empty.  If there are tasks blocked waiting to	write to 
			the queue, then one should be unblocked as after this function exits 
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	691b      	ldr	r3, [r3, #16]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d014      	beq.n	8001cf2 <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	3310      	adds	r3, #16
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff fce9 	bl	80016a4 <xTaskRemoveFromEventList>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d10c      	bne.n	8001cf2 <xQueueGenericReset+0xa2>
				{
					portYIELD_WITHIN_API();
 8001cd8:	f000 fc2c 	bl	8002534 <vPortYieldFromISR>
 8001cdc:	e009      	b.n	8001cf2 <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	3310      	adds	r3, #16
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f000 fcbe 	bl	8002664 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );		
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	3324      	adds	r3, #36	; 0x24
 8001cec:	4618      	mov	r0, r3
 8001cee:	f000 fcb9 	bl	8002664 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001cf2:	f000 fc3f 	bl	8002574 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001cf6:	2301      	movs	r3, #1
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3708      	adds	r7, #8
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b088      	sub	sp, #32
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	60b9      	str	r1, [r7, #8]
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d026      	beq.n	8001d66 <xQueueGenericCreate+0x66>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
 8001d18:	204c      	movs	r0, #76	; 0x4c
 8001d1a:	f000 fb45 	bl	80023a8 <pvPortMalloc>
 8001d1e:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d01f      	beq.n	8001d66 <xQueueGenericCreate+0x66>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	68ba      	ldr	r2, [r7, #8]
 8001d2a:	fb02 f303 	mul.w	r3, r2, r3
 8001d2e:	3301      	adds	r3, #1
 8001d30:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
 8001d32:	6978      	ldr	r0, [r7, #20]
 8001d34:	f000 fb38 	bl	80023a8 <pvPortMalloc>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d00c      	beq.n	8001d60 <xQueueGenericCreate+0x60>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	68fa      	ldr	r2, [r7, #12]
 8001d4a:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	68ba      	ldr	r2, [r7, #8]
 8001d50:	641a      	str	r2, [r3, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
 8001d52:	2101      	movs	r1, #1
 8001d54:	69b8      	ldr	r0, [r7, #24]
 8001d56:	f7ff ff7b 	bl	8001c50 <xQueueGenericReset>
					pxNewQueue->ucQueueType = ucQueueType;
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	61fb      	str	r3, [r7, #28]
 8001d5e:	e002      	b.n	8001d66 <xQueueGenericCreate+0x66>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
 8001d60:	69b8      	ldr	r0, [r7, #24]
 8001d62:	f000 fb5d 	bl	8002420 <vPortFree>
			}
		}
	}

	configASSERT( xReturn );
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d104      	bne.n	8001d76 <xQueueGenericCreate+0x76>
 8001d6c:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001d70:	f380 8811 	msr	BASEPRI, r0
 8001d74:	e7fe      	b.n	8001d74 <xQueueGenericCreate+0x74>

	return xReturn;
 8001d76:	69fb      	ldr	r3, [r7, #28]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3720      	adds	r7, #32
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b088      	sub	sp, #32
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	60b9      	str	r1, [r7, #8]
 8001d8a:	607a      	str	r2, [r7, #4]
 8001d8c:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	61fb      	str	r3, [r7, #28]
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d104      	bne.n	8001da2 <xQueueGenericSend+0x22>
 8001d98:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001d9c:	f380 8811 	msr	BASEPRI, r0
 8001da0:	e7fe      	b.n	8001da0 <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d103      	bne.n	8001db0 <xQueueGenericSend+0x30>
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d101      	bne.n	8001db4 <xQueueGenericSend+0x34>
 8001db0:	2301      	movs	r3, #1
 8001db2:	e000      	b.n	8001db6 <xQueueGenericSend+0x36>
 8001db4:	2300      	movs	r3, #0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d104      	bne.n	8001dc4 <xQueueGenericSend+0x44>
 8001dba:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001dbe:	f380 8811 	msr	BASEPRI, r0
 8001dc2:	e7fe      	b.n	8001dc2 <xQueueGenericSend+0x42>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001dc4:	f000 fbc4 	bl	8002550 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d216      	bcs.n	8001e02 <xQueueGenericSend+0x82>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001dd4:	683a      	ldr	r2, [r7, #0]
 8001dd6:	68b9      	ldr	r1, [r7, #8]
 8001dd8:	68f8      	ldr	r0, [r7, #12]
 8001dda:	f000 f997 	bl	800210c <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d009      	beq.n	8001dfa <xQueueGenericSend+0x7a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	3324      	adds	r3, #36	; 0x24
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7ff fc5a 	bl	80016a4 <xTaskRemoveFromEventList>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d101      	bne.n	8001dfa <xQueueGenericSend+0x7a>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
 8001df6:	f000 fb9d 	bl	8002534 <vPortYieldFromISR>
					}
				}

				taskEXIT_CRITICAL();
 8001dfa:	f000 fbbb 	bl	8002574 <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e056      	b.n	8001eb0 <xQueueGenericSend+0x130>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d103      	bne.n	8001e10 <xQueueGenericSend+0x90>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001e08:	f000 fbb4 	bl	8002574 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	e04f      	b.n	8001eb0 <xQueueGenericSend+0x130>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d106      	bne.n	8001e24 <xQueueGenericSend+0xa4>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8001e16:	f107 0314 	add.w	r3, r7, #20
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff fc9a 	bl	8001754 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001e20:	2301      	movs	r3, #1
 8001e22:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
 8001e24:	f000 fba6 	bl	8002574 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001e28:	f7ff fa16 	bl	8001258 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001e2c:	f000 fb90 	bl	8002550 <vPortEnterCritical>
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e38:	d102      	bne.n	8001e40 <xQueueGenericSend+0xc0>
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	645a      	str	r2, [r3, #68]	; 0x44
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e48:	d102      	bne.n	8001e50 <xQueueGenericSend+0xd0>
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	649a      	str	r2, [r3, #72]	; 0x48
 8001e50:	f000 fb90 	bl	8002574 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001e54:	1d3a      	adds	r2, r7, #4
 8001e56:	f107 0314 	add.w	r3, r7, #20
 8001e5a:	4611      	mov	r1, r2
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff fc97 	bl	8001790 <xTaskCheckForTimeOut>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d11d      	bne.n	8001ea4 <xQueueGenericSend+0x124>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001e68:	68f8      	ldr	r0, [r7, #12]
 8001e6a:	f000 fa33 	bl	80022d4 <prvIsQueueFull>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d011      	beq.n	8001e98 <xQueueGenericSend+0x118>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	3310      	adds	r3, #16
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	4611      	mov	r1, r2
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7ff fbaf 	bl	80015e0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001e82:	68f8      	ldr	r0, [r7, #12]
 8001e84:	f000 f9c4 	bl	8002210 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001e88:	f7ff f9f4 	bl	8001274 <xTaskResumeAll>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d198      	bne.n	8001dc4 <xQueueGenericSend+0x44>
				{
					portYIELD_WITHIN_API();
 8001e92:	f000 fb4f 	bl	8002534 <vPortYieldFromISR>
 8001e96:	e795      	b.n	8001dc4 <xQueueGenericSend+0x44>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001e98:	68f8      	ldr	r0, [r7, #12]
 8001e9a:	f000 f9b9 	bl	8002210 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001e9e:	f7ff f9e9 	bl	8001274 <xTaskResumeAll>
 8001ea2:	e78f      	b.n	8001dc4 <xQueueGenericSend+0x44>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001ea4:	68f8      	ldr	r0, [r7, #12]
 8001ea6:	f000 f9b3 	bl	8002210 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001eaa:	f7ff f9e3 	bl	8001274 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001eae:	2300      	movs	r3, #0
		}
	}
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3720      	adds	r7, #32
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b086      	sub	sp, #24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]
 8001ec4:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d104      	bne.n	8001ed6 <xQueueGenericSendFromISR+0x1e>
 8001ecc:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001ed0:	f380 8811 	msr	BASEPRI, r0
 8001ed4:	e7fe      	b.n	8001ed4 <xQueueGenericSendFromISR+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d103      	bne.n	8001ee4 <xQueueGenericSendFromISR+0x2c>
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d101      	bne.n	8001ee8 <xQueueGenericSendFromISR+0x30>
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e000      	b.n	8001eea <xQueueGenericSendFromISR+0x32>
 8001ee8:	2300      	movs	r3, #0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d104      	bne.n	8001ef8 <xQueueGenericSendFromISR+0x40>
 8001eee:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001ef2:	f380 8811 	msr	BASEPRI, r0
 8001ef6:	e7fe      	b.n	8001ef6 <xQueueGenericSendFromISR+0x3e>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001ef8:	2300      	movs	r3, #0
 8001efa:	613b      	str	r3, [r7, #16]
 8001efc:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001f00:	f380 8811 	msr	BASEPRI, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d224      	bcs.n	8001f5a <xQueueGenericSendFromISR+0xa2>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001f10:	683a      	ldr	r2, [r7, #0]
 8001f12:	68b9      	ldr	r1, [r7, #8]
 8001f14:	68f8      	ldr	r0, [r7, #12]
 8001f16:	f000 f8f9 	bl	800210c <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f22:	d112      	bne.n	8001f4a <xQueueGenericSendFromISR+0x92>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d013      	beq.n	8001f54 <xQueueGenericSendFromISR+0x9c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	3324      	adds	r3, #36	; 0x24
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff fbb7 	bl	80016a4 <xTaskRemoveFromEventList>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d00b      	beq.n	8001f54 <xQueueGenericSendFromISR+0x9c>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d008      	beq.n	8001f54 <xQueueGenericSendFromISR+0x9c>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2201      	movs	r2, #1
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	e004      	b.n	8001f54 <xQueueGenericSendFromISR+0x9c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f4e:	1c5a      	adds	r2, r3, #1
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
 8001f54:	2301      	movs	r3, #1
 8001f56:	617b      	str	r3, [r7, #20]
 8001f58:	e001      	b.n	8001f5e <xQueueGenericSendFromISR+0xa6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8001f5e:	f04f 0000 	mov.w	r0, #0
 8001f62:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
 8001f66:	697b      	ldr	r3, [r7, #20]
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3718      	adds	r7, #24
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b088      	sub	sp, #32
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	607a      	str	r2, [r7, #4]
 8001f7c:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	61fb      	str	r3, [r7, #28]
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d104      	bne.n	8001f92 <xQueueGenericReceive+0x22>
 8001f88:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001f8c:	f380 8811 	msr	BASEPRI, r0
 8001f90:	e7fe      	b.n	8001f90 <xQueueGenericReceive+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d103      	bne.n	8001fa0 <xQueueGenericReceive+0x30>
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d101      	bne.n	8001fa4 <xQueueGenericReceive+0x34>
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e000      	b.n	8001fa6 <xQueueGenericReceive+0x36>
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d104      	bne.n	8001fb4 <xQueueGenericReceive+0x44>
 8001faa:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001fae:	f380 8811 	msr	BASEPRI, r0
 8001fb2:	e7fe      	b.n	8001fb2 <xQueueGenericReceive+0x42>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8001fb4:	f000 facc 	bl	8002550 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d03b      	beq.n	8002038 <xQueueGenericReceive+0xc8>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001fc6:	68b9      	ldr	r1, [r7, #8]
 8001fc8:	68f8      	ldr	r0, [r7, #12]
 8001fca:	f000 f8fb 	bl	80021c4 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d11c      	bne.n	800200e <xQueueGenericReceive+0x9e>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fd8:	1e5a      	subs	r2, r3, #1
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d104      	bne.n	8001ff0 <xQueueGenericReceive+0x80>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
 8001fe6:	f7ff fd6d 	bl	8001ac4 <xTaskGetCurrentTaskHandle>
 8001fea:	4602      	mov	r2, r0
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	691b      	ldr	r3, [r3, #16]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d01b      	beq.n	8002030 <xQueueGenericReceive+0xc0>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	3310      	adds	r3, #16
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7ff fb51 	bl	80016a4 <xTaskRemoveFromEventList>
 8002002:	4603      	mov	r3, r0
 8002004:	2b01      	cmp	r3, #1
 8002006:	d113      	bne.n	8002030 <xQueueGenericReceive+0xc0>
						{
							portYIELD_WITHIN_API();
 8002008:	f000 fa94 	bl	8002534 <vPortYieldFromISR>
 800200c:	e010      	b.n	8002030 <xQueueGenericReceive+0xc0>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002018:	2b00      	cmp	r3, #0
 800201a:	d009      	beq.n	8002030 <xQueueGenericReceive+0xc0>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	3324      	adds	r3, #36	; 0x24
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff fb3f 	bl	80016a4 <xTaskRemoveFromEventList>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <xQueueGenericReceive+0xc0>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
 800202c:	f000 fa82 	bl	8002534 <vPortYieldFromISR>
						}
					}
				}

				taskEXIT_CRITICAL();
 8002030:	f000 faa0 	bl	8002574 <vPortExitCritical>
				return pdPASS;
 8002034:	2301      	movs	r3, #1
 8002036:	e064      	b.n	8002102 <xQueueGenericReceive+0x192>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d103      	bne.n	8002046 <xQueueGenericReceive+0xd6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800203e:	f000 fa99 	bl	8002574 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002042:	2300      	movs	r3, #0
 8002044:	e05d      	b.n	8002102 <xQueueGenericReceive+0x192>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d106      	bne.n	800205a <xQueueGenericReceive+0xea>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 800204c:	f107 0310 	add.w	r3, r7, #16
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff fb7f 	bl	8001754 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002056:	2301      	movs	r3, #1
 8002058:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
 800205a:	f000 fa8b 	bl	8002574 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800205e:	f7ff f8fb 	bl	8001258 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002062:	f000 fa75 	bl	8002550 <vPortEnterCritical>
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800206e:	d102      	bne.n	8002076 <xQueueGenericReceive+0x106>
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2200      	movs	r2, #0
 8002074:	645a      	str	r2, [r3, #68]	; 0x44
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800207a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800207e:	d102      	bne.n	8002086 <xQueueGenericReceive+0x116>
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2200      	movs	r2, #0
 8002084:	649a      	str	r2, [r3, #72]	; 0x48
 8002086:	f000 fa75 	bl	8002574 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800208a:	1d3a      	adds	r2, r7, #4
 800208c:	f107 0310 	add.w	r3, r7, #16
 8002090:	4611      	mov	r1, r2
 8002092:	4618      	mov	r0, r3
 8002094:	f7ff fb7c 	bl	8001790 <xTaskCheckForTimeOut>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d12b      	bne.n	80020f6 <xQueueGenericReceive+0x186>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800209e:	68f8      	ldr	r0, [r7, #12]
 80020a0:	f000 f902 	bl	80022a8 <prvIsQueueEmpty>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d01f      	beq.n	80020ea <xQueueGenericReceive+0x17a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d108      	bne.n	80020c4 <xQueueGenericReceive+0x154>
					{
						portENTER_CRITICAL();
 80020b2:	f000 fa4d 	bl	8002550 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7ff fd30 	bl	8001b20 <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
 80020c0:	f000 fa58 	bl	8002574 <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	3324      	adds	r3, #36	; 0x24
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	4611      	mov	r1, r2
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff fa87 	bl	80015e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80020d2:	68f8      	ldr	r0, [r7, #12]
 80020d4:	f000 f89c 	bl	8002210 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80020d8:	f7ff f8cc 	bl	8001274 <xTaskResumeAll>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	f47f af68 	bne.w	8001fb4 <xQueueGenericReceive+0x44>
				{
					portYIELD_WITHIN_API();
 80020e4:	f000 fa26 	bl	8002534 <vPortYieldFromISR>
 80020e8:	e764      	b.n	8001fb4 <xQueueGenericReceive+0x44>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80020ea:	68f8      	ldr	r0, [r7, #12]
 80020ec:	f000 f890 	bl	8002210 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80020f0:	f7ff f8c0 	bl	8001274 <xTaskResumeAll>
 80020f4:	e75e      	b.n	8001fb4 <xQueueGenericReceive+0x44>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 80020f6:	68f8      	ldr	r0, [r7, #12]
 80020f8:	f000 f88a 	bl	8002210 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80020fc:	f7ff f8ba 	bl	8001274 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
 8002100:	2300      	movs	r3, #0
		}
	}
}
 8002102:	4618      	mov	r0, r3
 8002104:	3720      	adds	r7, #32
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop

0800210c <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211c:	2b00      	cmp	r3, #0
 800211e:	d10c      	bne.n	800213a <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d143      	bne.n	80021b0 <prvCopyDataToQueue+0xa4>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	4618      	mov	r0, r3
 800212e:	f7ff fd51 	bl	8001bd4 <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2200      	movs	r2, #0
 8002136:	605a      	str	r2, [r3, #4]
 8002138:	e03a      	b.n	80021b0 <prvCopyDataToQueue+0xa4>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d119      	bne.n	8002174 <prvCopyDataToQueue+0x68>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	6898      	ldr	r0, [r3, #8]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002148:	461a      	mov	r2, r3
 800214a:	68b9      	ldr	r1, [r7, #8]
 800214c:	f000 fb77 	bl	800283e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	689a      	ldr	r2, [r3, #8]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002158:	441a      	add	r2, r3
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	689a      	ldr	r2, [r3, #8]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	429a      	cmp	r2, r3
 8002168:	d322      	bcc.n	80021b0 <prvCopyDataToQueue+0xa4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	609a      	str	r2, [r3, #8]
 8002172:	e01d      	b.n	80021b0 <prvCopyDataToQueue+0xa4>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	68d8      	ldr	r0, [r3, #12]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217c:	461a      	mov	r2, r3
 800217e:	68b9      	ldr	r1, [r7, #8]
 8002180:	f000 fb5d 	bl	800283e <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	68da      	ldr	r2, [r3, #12]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218c:	425b      	negs	r3, r3
 800218e:	441a      	add	r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	68da      	ldr	r2, [r3, #12]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	429a      	cmp	r2, r3
 800219e:	d207      	bcs.n	80021b0 <prvCopyDataToQueue+0xa4>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	685a      	ldr	r2, [r3, #4]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a8:	425b      	negs	r3, r3
 80021aa:	441a      	add	r2, r3
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021b4:	1c5a      	adds	r2, r3, #1
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	639a      	str	r2, [r3, #56]	; 0x38
}
 80021ba:	bf00      	nop
 80021bc:	3710      	adds	r7, #16
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop

080021c4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d018      	beq.n	8002208 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	68da      	ldr	r2, [r3, #12]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021de:	441a      	add	r2, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	68da      	ldr	r2, [r3, #12]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d303      	bcc.n	80021f8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	68d9      	ldr	r1, [r3, #12]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002200:	461a      	mov	r2, r3
 8002202:	6838      	ldr	r0, [r7, #0]
 8002204:	f000 fb1b 	bl	800283e <memcpy>
	}
}
 8002208:	bf00      	nop
 800220a:	3708      	adds	r7, #8
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002218:	f000 f99a 	bl	8002550 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800221c:	e012      	b.n	8002244 <prvUnlockQueue+0x34>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002222:	2b00      	cmp	r3, #0
 8002224:	d013      	beq.n	800224e <prvUnlockQueue+0x3e>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	3324      	adds	r3, #36	; 0x24
 800222a:	4618      	mov	r0, r3
 800222c:	f7ff fa3a 	bl	80016a4 <xTaskRemoveFromEventList>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
 8002236:	f7ff faff 	bl	8001838 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800223e:	1e5a      	subs	r2, r3, #1
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	649a      	str	r2, [r3, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002248:	2b00      	cmp	r3, #0
 800224a:	dce8      	bgt.n	800221e <prvUnlockQueue+0xe>
 800224c:	e000      	b.n	8002250 <prvUnlockQueue+0x40>

				--( pxQueue->xTxLock );
			}
			else
			{
				break;
 800224e:	bf00      	nop
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f04f 32ff 	mov.w	r2, #4294967295
 8002256:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 8002258:	f000 f98c 	bl	8002574 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800225c:	f000 f978 	bl	8002550 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8002260:	e012      	b.n	8002288 <prvUnlockQueue+0x78>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d013      	beq.n	8002292 <prvUnlockQueue+0x82>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	3310      	adds	r3, #16
 800226e:	4618      	mov	r0, r3
 8002270:	f7ff fa18 	bl	80016a4 <xTaskRemoveFromEventList>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
 800227a:	f7ff fadd 	bl	8001838 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002282:	1e5a      	subs	r2, r3, #1
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	645a      	str	r2, [r3, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228c:	2b00      	cmp	r3, #0
 800228e:	dce8      	bgt.n	8002262 <prvUnlockQueue+0x52>
 8002290:	e000      	b.n	8002294 <prvUnlockQueue+0x84>

				--( pxQueue->xRxLock );
			}
			else
			{
				break;
 8002292:	bf00      	nop
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f04f 32ff 	mov.w	r2, #4294967295
 800229a:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800229c:	f000 f96a 	bl	8002574 <vPortExitCritical>
}
 80022a0:	bf00      	nop
 80022a2:	3708      	adds	r7, #8
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
 80022b0:	f000 f94e 	bl	8002550 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	bf0c      	ite	eq
 80022bc:	2301      	moveq	r3, #1
 80022be:	2300      	movne	r3, #0
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
 80022c4:	f000 f956 	bl	8002574 <vPortExitCritical>

	return xReturn;
 80022c8:	68fb      	ldr	r3, [r7, #12]
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3710      	adds	r7, #16
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop

080022d4 <prvIsQueueFull>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
 80022dc:	f000 f938 	bl	8002550 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022e8:	429a      	cmp	r2, r3
 80022ea:	bf0c      	ite	eq
 80022ec:	2301      	moveq	r3, #1
 80022ee:	2300      	movne	r3, #0
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
 80022f4:	f000 f93e 	bl	8002574 <vPortExitCritical>

	return xReturn;
 80022f8:	68fb      	ldr	r3, [r7, #12]
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3710      	adds	r7, #16
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop

08002304 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if configQUEUE_REGISTRY_SIZE > 0

	void vQueueAddToRegistry( xQueueHandle xQueue, signed char *pcQueueName )
	{
 8002304:	b480      	push	{r7}
 8002306:	b085      	sub	sp, #20
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6039      	str	r1, [r7, #0]
	unsigned portBASE_TYPE ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( unsigned portBASE_TYPE ) 0U; ux < ( unsigned portBASE_TYPE ) configQUEUE_REGISTRY_SIZE; ux++ )
 800230e:	2300      	movs	r3, #0
 8002310:	60fb      	str	r3, [r7, #12]
 8002312:	e014      	b.n	800233e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002314:	4a0e      	ldr	r2, [pc, #56]	; (8002350 <vQueueAddToRegistry+0x4c>)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d10b      	bne.n	8002338 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002320:	490b      	ldr	r1, [pc, #44]	; (8002350 <vQueueAddToRegistry+0x4c>)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	683a      	ldr	r2, [r7, #0]
 8002326:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800232a:	4a09      	ldr	r2, [pc, #36]	; (8002350 <vQueueAddToRegistry+0x4c>)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	4413      	add	r3, r2
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	605a      	str	r2, [r3, #4]
				break;
 8002336:	e005      	b.n	8002344 <vQueueAddToRegistry+0x40>
	{
	unsigned portBASE_TYPE ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( unsigned portBASE_TYPE ) 0U; ux < ( unsigned portBASE_TYPE ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	3301      	adds	r3, #1
 800233c:	60fb      	str	r3, [r7, #12]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2b0f      	cmp	r3, #15
 8002342:	d9e7      	bls.n	8002314 <vQueueAddToRegistry+0x10>
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
				xQueueRegistry[ ux ].xHandle = xQueue;
				break;
			}
		}
	}
 8002344:	bf00      	nop
 8002346:	3714      	adds	r7, #20
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr
 8002350:	20001e08 	.word	0x20001e08

08002354 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800235e:	f000 f8f7 	bl	8002550 <vPortEnterCritical>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800236a:	d102      	bne.n	8002372 <vQueueWaitForMessageRestricted+0x1e>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	645a      	str	r2, [r3, #68]	; 0x44
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800237a:	d102      	bne.n	8002382 <vQueueWaitForMessageRestricted+0x2e>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	649a      	str	r2, [r3, #72]	; 0x48
 8002382:	f000 f8f7 	bl	8002574 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800238a:	2b00      	cmp	r3, #0
 800238c:	d105      	bne.n	800239a <vQueueWaitForMessageRestricted+0x46>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	3324      	adds	r3, #36	; 0x24
 8002392:	6839      	ldr	r1, [r7, #0]
 8002394:	4618      	mov	r0, r3
 8002396:	f7ff f95b 	bl	8001650 <vTaskPlaceOnEventListRestricted>
		}
		prvUnlockQueue( pxQueue );
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f7ff ff38 	bl	8002210 <prvUnlockQueue>
	}
 80023a0:	bf00      	nop
 80023a2:	3708      	adds	r7, #8
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL; 
 80023b0:	2300      	movs	r3, #0
 80023b2:	60fb      	str	r3, [r7, #12]

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f003 0307 	and.w	r3, r3, #7
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d004      	beq.n	80023c8 <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f023 0307 	bic.w	r3, r3, #7
 80023c4:	3308      	adds	r3, #8
 80023c6:	607b      	str	r3, [r7, #4]
		}
	#endif

	vTaskSuspendAll();
 80023c8:	f7fe ff46 	bl	8001258 <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
 80023cc:	4b12      	ldr	r3, [pc, #72]	; (8002418 <pvPortMalloc+0x70>)
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4413      	add	r3, r2
 80023d4:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80023d8:	d212      	bcs.n	8002400 <pvPortMalloc+0x58>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 80023da:	4b0f      	ldr	r3, [pc, #60]	; (8002418 <pvPortMalloc+0x70>)
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	441a      	add	r2, r3
 80023e2:	4b0d      	ldr	r3, [pc, #52]	; (8002418 <pvPortMalloc+0x70>)
 80023e4:	681b      	ldr	r3, [r3, #0]
	#endif

	vTaskSuspendAll();
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d90a      	bls.n	8002400 <pvPortMalloc+0x58>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
 80023ea:	4b0b      	ldr	r3, [pc, #44]	; (8002418 <pvPortMalloc+0x70>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a0b      	ldr	r2, [pc, #44]	; (800241c <pvPortMalloc+0x74>)
 80023f0:	4413      	add	r3, r2
 80023f2:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;			
 80023f4:	4b08      	ldr	r3, [pc, #32]	; (8002418 <pvPortMalloc+0x70>)
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	4413      	add	r3, r2
 80023fc:	4a06      	ldr	r2, [pc, #24]	; (8002418 <pvPortMalloc+0x70>)
 80023fe:	6013      	str	r3, [r2, #0]
		}	
	}
	xTaskResumeAll();
 8002400:	f7fe ff38 	bl	8001274 <xTaskResumeAll>
	
	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d101      	bne.n	800240e <pvPortMalloc+0x66>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800240a:	f7fe f901 	bl	8000610 <vApplicationMallocFailedHook>
		}
	}
	#endif	

	return pvReturn;
 800240e:	68fb      	ldr	r3, [r7, #12]
}
 8002410:	4618      	mov	r0, r3
 8002412:	3710      	adds	r7, #16
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	20001d88 	.word	0x20001d88
 800241c:	20000188 	.word	0x20000188

08002420 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
	/* Memory cannot be freed using this scheme.  See heap_2.c and heap_3.c 
	for alternative implementations, and the memory management pages of 
	http://www.FreeRTOS.org for more information. */
	( void ) pv;
}
 8002428:	bf00      	nop
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <xPortGetFreeHeapSize>:
	xNextFreeByte = ( size_t ) 0;
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
	return ( configTOTAL_HEAP_SIZE - xNextFreeByte );
 8002438:	4b04      	ldr	r3, [pc, #16]	; (800244c <xPortGetFreeHeapSize+0x18>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f5c3 53e0 	rsb	r3, r3, #7168	; 0x1c00
}
 8002440:	4618      	mov	r0, r3
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	20001d88 	.word	0x20001d88

08002450 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
 8002450:	b480      	push	{r7}
 8002452:	b085      	sub	sp, #20
 8002454:	af00      	add	r7, sp, #0
 8002456:	60f8      	str	r0, [r7, #12]
 8002458:	60b9      	str	r1, [r7, #8]
 800245a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	3b04      	subs	r3, #4
 8002460:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002468:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	3b04      	subs	r3, #4
 800246e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
 8002470:	68ba      	ldr	r2, [r7, #8]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	3b04      	subs	r3, #4
 800247a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;	/* LR */
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2200      	movs	r2, #0
 8002480:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	3b14      	subs	r3, #20
 8002486:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	3b04      	subs	r3, #4
 8002492:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f06f 0202 	mvn.w	r2, #2
 800249a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	3b20      	subs	r3, #32
 80024a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80024a2:	68fb      	ldr	r3, [r7, #12]
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3714      	adds	r7, #20
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80024b0:	4b05      	ldr	r3, [pc, #20]	; (80024c8 <pxCurrentTCBConst2>)
 80024b2:	6819      	ldr	r1, [r3, #0]
 80024b4:	6808      	ldr	r0, [r1, #0]
 80024b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024ba:	f380 8809 	msr	PSP, r0
 80024be:	f04f 0000 	mov.w	r0, #0
 80024c2:	f380 8811 	msr	BASEPRI, r0
 80024c6:	4770      	bx	lr

080024c8 <pxCurrentTCBConst2>:
 80024c8:	20000084 	.word	0x20000084
					"	bx r14							\n"
					"									\n"
					"	.align 2						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80024cc:	bf00      	nop
 80024ce:	bf00      	nop

080024d0 <vPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void vPortStartFirstTask( void )
{
	__asm volatile(
 80024d0:	4804      	ldr	r0, [pc, #16]	; (80024e4 <vPortStartFirstTask+0x14>)
 80024d2:	6800      	ldr	r0, [r0, #0]
 80024d4:	6800      	ldr	r0, [r0, #0]
 80024d6:	f380 8808 	msr	MSP, r0
 80024da:	b662      	cpsie	i
 80024dc:	df00      	svc	0
 80024de:	bf00      	nop
					" msr msp, r0			\n" /* Set the msp back to the start of the stack. */
					" cpsie i				\n" /* Globally enable interrupts. */
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80024e0:	bf00      	nop
 80024e2:	0000      	.short	0x0000
 80024e4:	e000ed08 	.word	0xe000ed08

080024e8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
	/* Make PendSV and SysTick the lowest priority interrupts. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 80024ec:	4a0e      	ldr	r2, [pc, #56]	; (8002528 <xPortStartScheduler+0x40>)
 80024ee:	4b0e      	ldr	r3, [pc, #56]	; (8002528 <xPortStartScheduler+0x40>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024f6:	6013      	str	r3, [r2, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 80024f8:	4a0b      	ldr	r2, [pc, #44]	; (8002528 <xPortStartScheduler+0x40>)
 80024fa:	4b0b      	ldr	r3, [pc, #44]	; (8002528 <xPortStartScheduler+0x40>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002502:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8002504:	f000 f890 	bl	8002628 <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002508:	4b08      	ldr	r3, [pc, #32]	; (800252c <xPortStartScheduler+0x44>)
 800250a:	2200      	movs	r2, #0
 800250c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800250e:	f000 f89f 	bl	8002650 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002512:	4a07      	ldr	r2, [pc, #28]	; (8002530 <xPortStartScheduler+0x48>)
 8002514:	4b06      	ldr	r3, [pc, #24]	; (8002530 <xPortStartScheduler+0x48>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800251c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 800251e:	f7ff ffd7 	bl	80024d0 <vPortStartFirstTask>

	/* Should not get here! */
	return 0;
 8002522:	2300      	movs	r3, #0
}
 8002524:	4618      	mov	r0, r3
 8002526:	bd80      	pop	{r7, pc}
 8002528:	e000ed20 	.word	0xe000ed20
 800252c:	20000014 	.word	0x20000014
 8002530:	e000ef34 	.word	0xe000ef34

08002534 <vPortYieldFromISR>:
	is nothing to return to.  */
}
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8002538:	4b04      	ldr	r3, [pc, #16]	; (800254c <vPortYieldFromISR+0x18>)
 800253a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800253e:	601a      	str	r2, [r3, #0]
}
 8002540:	bf00      	nop
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	e000ed04 	.word	0xe000ed04

08002550 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8002554:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002558:	f380 8811 	msr	BASEPRI, r0
	uxCriticalNesting++;
 800255c:	4b04      	ldr	r3, [pc, #16]	; (8002570 <vPortEnterCritical+0x20>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	3301      	adds	r3, #1
 8002562:	4a03      	ldr	r2, [pc, #12]	; (8002570 <vPortEnterCritical+0x20>)
 8002564:	6013      	str	r3, [r2, #0]
}
 8002566:	bf00      	nop
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr
 8002570:	20000014 	.word	0x20000014

08002574 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
 8002578:	4b08      	ldr	r3, [pc, #32]	; (800259c <vPortExitCritical+0x28>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	3b01      	subs	r3, #1
 800257e:	4a07      	ldr	r2, [pc, #28]	; (800259c <vPortExitCritical+0x28>)
 8002580:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002582:	4b06      	ldr	r3, [pc, #24]	; (800259c <vPortExitCritical+0x28>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d103      	bne.n	8002592 <vPortExitCritical+0x1e>
	{
		portENABLE_INTERRUPTS();
 800258a:	f04f 0000 	mov.w	r0, #0
 800258e:	f380 8811 	msr	BASEPRI, r0
	}
}
 8002592:	bf00      	nop
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr
 800259c:	20000014 	.word	0x20000014

080025a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80025a0:	f3ef 8009 	mrs	r0, PSP
 80025a4:	4b11      	ldr	r3, [pc, #68]	; (80025ec <pxCurrentTCBConst>)
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	f01e 0f10 	tst.w	lr, #16
 80025ac:	bf08      	it	eq
 80025ae:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80025b2:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025b6:	6010      	str	r0, [r2, #0]
 80025b8:	e92d 4008 	stmdb	sp!, {r3, lr}
 80025bc:	f04f 0050 	mov.w	r0, #80	; 0x50
 80025c0:	f380 8811 	msr	BASEPRI, r0
 80025c4:	f7fe ff94 	bl	80014f0 <vTaskSwitchContext>
 80025c8:	f04f 0000 	mov.w	r0, #0
 80025cc:	f380 8811 	msr	BASEPRI, r0
 80025d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80025d4:	6819      	ldr	r1, [r3, #0]
 80025d6:	6808      	ldr	r0, [r1, #0]
 80025d8:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025dc:	f01e 0f10 	tst.w	lr, #16
 80025e0:	bf08      	it	eq
 80025e2:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80025e6:	f380 8809 	msr	PSP, r0
 80025ea:	4770      	bx	lr

080025ec <pxCurrentTCBConst>:
 80025ec:	20000084 	.word	0x20000084
	"										\n"
	"	.align 2							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80025f0:	bf00      	nop
 80025f2:	bf00      	nop

080025f4 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
unsigned long ulDummy;

	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 80025fa:	4b0a      	ldr	r3, [pc, #40]	; (8002624 <SysTick_Handler+0x30>)
 80025fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002600:	601a      	str	r2, [r3, #0]
	#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8002602:	2300      	movs	r3, #0
 8002604:	607b      	str	r3, [r7, #4]
 8002606:	f04f 0050 	mov.w	r0, #80	; 0x50
 800260a:	f380 8811 	msr	BASEPRI, r0
	{
		vTaskIncrementTick();
 800260e:	f7fe fec7 	bl	80013a0 <vTaskIncrementTick>
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
 8002612:	f04f 0000 	mov.w	r0, #0
 8002616:	f380 8811 	msr	BASEPRI, r0
}
 800261a:	bf00      	nop
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	e000ed04 	.word	0xe000ed04

08002628 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800262c:	4b05      	ldr	r3, [pc, #20]	; (8002644 <prvSetupTimerInterrupt+0x1c>)
 800262e:	4a06      	ldr	r2, [pc, #24]	; (8002648 <prvSetupTimerInterrupt+0x20>)
 8002630:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8002632:	4b06      	ldr	r3, [pc, #24]	; (800264c <prvSetupTimerInterrupt+0x24>)
 8002634:	2207      	movs	r2, #7
 8002636:	601a      	str	r2, [r3, #0]
}
 8002638:	bf00      	nop
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	e000e014 	.word	0xe000e014
 8002648:	0002903f 	.word	0x0002903f
 800264c:	e000e010 	.word	0xe000e010

08002650 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002650:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002660 <vPortEnableVFP+0x10>
 8002654:	6801      	ldr	r1, [r0, #0]
 8002656:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800265a:	6001      	str	r1, [r0, #0]
 800265c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800265e:	bf00      	nop
 8002660:	e000ed88 	.word	0xe000ed88

08002664 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f103 0208 	add.w	r2, r3, #8
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f04f 32ff 	mov.w	r2, #4294967295
 800267c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f103 0208 	add.w	r2, r3, #8
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f103 0208 	add.w	r2, r3, #8
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	601a      	str	r2, [r3, #0]
}
 8002698:	bf00      	nop
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	611a      	str	r2, [r3, #16]
}
 80026b2:	bf00      	nop
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop

080026c0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
 80026c0:	b480      	push	{r7}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	685a      	ldr	r2, [r3, #4]
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685a      	ldr	r2, [r3, #4]
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	683a      	ldr	r2, [r7, #0]
 80026e6:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	683a      	ldr	r2, [r7, #0]
 80026ec:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	683a      	ldr	r2, [r7, #0]
 80026f2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	1c5a      	adds	r2, r3, #1
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	601a      	str	r2, [r3, #0]
}
 8002704:	bf00      	nop
 8002706:	3714      	adds	r7, #20
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
 8002710:	b480      	push	{r7}
 8002712:	b085      	sub	sp, #20
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002726:	d103      	bne.n	8002730 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	60fb      	str	r3, [r7, #12]
 800272e:	e00c      	b.n	800274a <vListInsert+0x3a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	3308      	adds	r3, #8
 8002734:	60fb      	str	r3, [r7, #12]
 8002736:	e002      	b.n	800273e <vListInsert+0x2e>
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	60fb      	str	r3, [r7, #12]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	429a      	cmp	r2, r3
 8002748:	d9f6      	bls.n	8002738 <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	685a      	ldr	r2, [r3, #4]
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	683a      	ldr	r2, [r7, #0]
 8002758:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	68fa      	ldr	r2, [r7, #12]
 800275e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	683a      	ldr	r2, [r7, #0]
 8002764:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	1c5a      	adds	r2, r3, #1
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	601a      	str	r2, [r3, #0]
}
 8002776:	bf00      	nop
 8002778:	3714      	adds	r7, #20
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop

08002784 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
 8002784:	b480      	push	{r7}
 8002786:	b085      	sub	sp, #20
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	6892      	ldr	r2, [r2, #8]
 8002794:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	6852      	ldr	r2, [r2, #4]
 800279e:	605a      	str	r2, [r3, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	691b      	ldr	r3, [r3, #16]
 80027a4:	60fb      	str	r3, [r7, #12]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	685a      	ldr	r2, [r3, #4]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d103      	bne.n	80027b8 <vListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	689a      	ldr	r2, [r3, #8]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	1e5a      	subs	r2, r3, #1
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	601a      	str	r2, [r3, #0]
}
 80027c8:	bf00      	nop
 80027ca:	3714      	adds	r7, #20
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <__libc_init_array>:
 80027d4:	b570      	push	{r4, r5, r6, lr}
 80027d6:	4b0e      	ldr	r3, [pc, #56]	; (8002810 <__libc_init_array+0x3c>)
 80027d8:	4c0e      	ldr	r4, [pc, #56]	; (8002814 <__libc_init_array+0x40>)
 80027da:	1ae4      	subs	r4, r4, r3
 80027dc:	10a4      	asrs	r4, r4, #2
 80027de:	2500      	movs	r5, #0
 80027e0:	461e      	mov	r6, r3
 80027e2:	42a5      	cmp	r5, r4
 80027e4:	d004      	beq.n	80027f0 <__libc_init_array+0x1c>
 80027e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80027ea:	4798      	blx	r3
 80027ec:	3501      	adds	r5, #1
 80027ee:	e7f8      	b.n	80027e2 <__libc_init_array+0xe>
 80027f0:	f000 f878 	bl	80028e4 <_init>
 80027f4:	4c08      	ldr	r4, [pc, #32]	; (8002818 <__libc_init_array+0x44>)
 80027f6:	4b09      	ldr	r3, [pc, #36]	; (800281c <__libc_init_array+0x48>)
 80027f8:	1ae4      	subs	r4, r4, r3
 80027fa:	10a4      	asrs	r4, r4, #2
 80027fc:	2500      	movs	r5, #0
 80027fe:	461e      	mov	r6, r3
 8002800:	42a5      	cmp	r5, r4
 8002802:	d004      	beq.n	800280e <__libc_init_array+0x3a>
 8002804:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002808:	4798      	blx	r3
 800280a:	3501      	adds	r5, #1
 800280c:	e7f8      	b.n	8002800 <__libc_init_array+0x2c>
 800280e:	bd70      	pop	{r4, r5, r6, pc}
 8002810:	080028fc 	.word	0x080028fc
 8002814:	080028fc 	.word	0x080028fc
 8002818:	08002900 	.word	0x08002900
 800281c:	080028fc 	.word	0x080028fc

08002820 <memcmp>:
 8002820:	b510      	push	{r4, lr}
 8002822:	3901      	subs	r1, #1
 8002824:	4402      	add	r2, r0
 8002826:	4290      	cmp	r0, r2
 8002828:	d007      	beq.n	800283a <memcmp+0x1a>
 800282a:	f810 3b01 	ldrb.w	r3, [r0], #1
 800282e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8002832:	42a3      	cmp	r3, r4
 8002834:	d0f7      	beq.n	8002826 <memcmp+0x6>
 8002836:	1b18      	subs	r0, r3, r4
 8002838:	bd10      	pop	{r4, pc}
 800283a:	2000      	movs	r0, #0
 800283c:	bd10      	pop	{r4, pc}

0800283e <memcpy>:
 800283e:	b510      	push	{r4, lr}
 8002840:	1e43      	subs	r3, r0, #1
 8002842:	440a      	add	r2, r1
 8002844:	4291      	cmp	r1, r2
 8002846:	d004      	beq.n	8002852 <memcpy+0x14>
 8002848:	f811 4b01 	ldrb.w	r4, [r1], #1
 800284c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002850:	e7f8      	b.n	8002844 <memcpy+0x6>
 8002852:	bd10      	pop	{r4, pc}

08002854 <memset>:
 8002854:	4402      	add	r2, r0
 8002856:	4603      	mov	r3, r0
 8002858:	4293      	cmp	r3, r2
 800285a:	d002      	beq.n	8002862 <memset+0xe>
 800285c:	f803 1b01 	strb.w	r1, [r3], #1
 8002860:	e7fa      	b.n	8002858 <memset+0x4>
 8002862:	4770      	bx	lr

08002864 <strncpy>:
 8002864:	b510      	push	{r4, lr}
 8002866:	4603      	mov	r3, r0
 8002868:	b142      	cbz	r2, 800287c <strncpy+0x18>
 800286a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800286e:	f803 4b01 	strb.w	r4, [r3], #1
 8002872:	3a01      	subs	r2, #1
 8002874:	2c00      	cmp	r4, #0
 8002876:	d1f7      	bne.n	8002868 <strncpy+0x4>
 8002878:	441a      	add	r2, r3
 800287a:	e000      	b.n	800287e <strncpy+0x1a>
 800287c:	bd10      	pop	{r4, pc}
 800287e:	4293      	cmp	r3, r2
 8002880:	d002      	beq.n	8002888 <strncpy+0x24>
 8002882:	f803 4b01 	strb.w	r4, [r3], #1
 8002886:	e7fa      	b.n	800287e <strncpy+0x1a>
 8002888:	bd10      	pop	{r4, pc}
 800288a:	0000      	movs	r0, r0
 800288c:	6e69614d 	.word	0x6e69614d
 8002890:	75657551 	.word	0x75657551
 8002894:	00000065 	.word	0x00000065
 8002898:	65764578 	.word	0x65764578
 800289c:	6553746e 	.word	0x6553746e
 80028a0:	6870616d 	.word	0x6870616d
 80028a4:	0065726f 	.word	0x0065726f
 80028a8:	00007852 	.word	0x00007852
 80028ac:	00005854 	.word	0x00005854
 80028b0:	006d6553 	.word	0x006d6553
 80028b4:	5444454c 	.word	0x5444454c
 80028b8:	72656d69 	.word	0x72656d69
 80028bc:	00000000 	.word	0x00000000
 80028c0:	20726d54 	.word	0x20726d54
 80028c4:	00637653 	.word	0x00637653
 80028c8:	454c4449 	.word	0x454c4449
 80028cc:	00000000 	.word	0x00000000

080028d0 <ucExpectedStackBytes.6077>:
 80028d0:	a5a5a5a5 a5a5a5a5 a5a5a5a5 a5a5a5a5     ................
 80028e0:	a5a5a5a5                                ....

080028e4 <_init>:
 80028e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028e6:	bf00      	nop
 80028e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028ea:	bc08      	pop	{r3}
 80028ec:	469e      	mov	lr, r3
 80028ee:	4770      	bx	lr

080028f0 <_fini>:
 80028f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028f2:	bf00      	nop
 80028f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028f6:	bc08      	pop	{r3}
 80028f8:	469e      	mov	lr, r3
 80028fa:	4770      	bx	lr
